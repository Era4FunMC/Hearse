From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: wangxyper <wangxyper@163.com>
Date: Wed, 4 Jan 2023 20:56:48 +0800
Subject: [PATCH] Fix block event queue and navigating mobs list


diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 1383031f6525cc0b18775fbd48d324c3ff12f05f..96d9bf88c793eae29772071c6eeeac18ffed4a4e 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -4,6 +4,7 @@ import co.m2ek4u.aoame.AnotherTickThread;
 import com.google.common.annotations.VisibleForTesting;
 import co.aikar.timings.TimingHistory; // Paper
 import com.google.common.collect.Lists;
+import com.google.common.collect.Sets;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
@@ -22,15 +23,8 @@ import java.io.IOException;
 import java.io.Writer;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.ArrayList;
-import java.util.Comparator;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Locale;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Set;
-import java.util.UUID;
+import java.util.*;
+import java.util.concurrent.ConcurrentLinkedDeque;
 import java.util.concurrent.Executor;
 import java.util.function.BooleanSupplier;
 import java.util.function.Function;
@@ -159,6 +153,7 @@ import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
 import net.minecraft.world.ticks.LevelTicks;
+import org.checkerframework.checker.units.qual.C;
 import org.slf4j.Logger;
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
@@ -205,7 +200,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
     final Set<Mob> navigatingMobs;
     volatile boolean isUpdatingNavigations;
     protected final Raids raids;
-    private final ObjectLinkedOpenHashSet<BlockEventData> blockEvents;
+    private final Deque<BlockEventData> blockEvents;
     private final List<BlockEventData> blockEventsToReschedule;
     private boolean handlingTick;
     private final List<CustomSpawner> customSpawners;
@@ -326,7 +321,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         for (int cx = minChunkX; cx <= maxChunkX; ++cx) {
             for (int cz = minChunkZ; cz <= maxChunkZ; ++cz) {
                 io.papermc.paper.chunk.system.ChunkSystem.scheduleChunkLoad(
-                    this, cx, cz, net.minecraft.world.level.chunk.ChunkStatus.FULL, true, priority, consumer
+                        this, cx, cz, net.minecraft.world.level.chunk.ChunkStatus.FULL, true, priority, consumer
                 );
             }
         }
@@ -335,7 +330,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
     // Paper start - rewrite chunk system
     public final io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler chunkTaskScheduler;
     public final io.papermc.paper.chunk.system.io.RegionFileIOThread.ChunkDataController chunkDataControllerNew
-        = new io.papermc.paper.chunk.system.io.RegionFileIOThread.ChunkDataController(io.papermc.paper.chunk.system.io.RegionFileIOThread.RegionFileType.CHUNK_DATA) {
+            = new io.papermc.paper.chunk.system.io.RegionFileIOThread.ChunkDataController(io.papermc.paper.chunk.system.io.RegionFileIOThread.RegionFileType.CHUNK_DATA) {
 
         @Override
         public net.minecraft.world.level.chunk.storage.RegionFileStorage getCache() {
@@ -353,7 +348,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         }
     };
     public final io.papermc.paper.chunk.system.io.RegionFileIOThread.ChunkDataController poiDataControllerNew
-        = new io.papermc.paper.chunk.system.io.RegionFileIOThread.ChunkDataController(io.papermc.paper.chunk.system.io.RegionFileIOThread.RegionFileType.POI_DATA) {
+            = new io.papermc.paper.chunk.system.io.RegionFileIOThread.ChunkDataController(io.papermc.paper.chunk.system.io.RegionFileIOThread.RegionFileType.POI_DATA) {
 
         @Override
         public net.minecraft.world.level.chunk.storage.RegionFileStorage getCache() {
@@ -371,7 +366,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         }
     };
     public final io.papermc.paper.chunk.system.io.RegionFileIOThread.ChunkDataController entityDataControllerNew
-        = new io.papermc.paper.chunk.system.io.RegionFileIOThread.ChunkDataController(io.papermc.paper.chunk.system.io.RegionFileIOThread.RegionFileType.ENTITY_DATA) {
+            = new io.papermc.paper.chunk.system.io.RegionFileIOThread.ChunkDataController(io.papermc.paper.chunk.system.io.RegionFileIOThread.RegionFileType.ENTITY_DATA) {
 
         @Override
         public net.minecraft.world.level.chunk.storage.RegionFileStorage getCache() {
@@ -400,8 +395,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
             ChunkPos nbtPos = nbt == null ? null : EntityStorage.readChunkPos(nbt);
             if (nbtPos != null && !pos.equals(nbtPos)) {
                 throw new IllegalArgumentException(
-                    "Entity chunk coordinate and serialized data do not have matching coordinates, trying to serialize coordinate " + pos.toString()
-                        + " but compound says coordinate is " + nbtPos + " for world: " + this
+                        "Entity chunk coordinate and serialized data do not have matching coordinates, trying to serialize coordinate " + pos.toString()
+                                + " but compound says coordinate is " + nbtPos + " for world: " + this
                 );
             }
             super.write(pos, nbt);
@@ -411,8 +406,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
     private void writeEntityChunk(int chunkX, int chunkZ, net.minecraft.nbt.CompoundTag compound) throws IOException {
         if (!io.papermc.paper.chunk.system.io.RegionFileIOThread.isRegionFileThread()) {
             io.papermc.paper.chunk.system.io.RegionFileIOThread.scheduleSave(
-                this, chunkX, chunkZ, compound,
-                io.papermc.paper.chunk.system.io.RegionFileIOThread.RegionFileType.ENTITY_DATA);
+                    this, chunkX, chunkZ, compound,
+                    io.papermc.paper.chunk.system.io.RegionFileIOThread.RegionFileType.ENTITY_DATA);
             return;
         }
         this.entityStorage.write(new ChunkPos(chunkX, chunkZ), compound);
@@ -421,8 +416,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
     private net.minecraft.nbt.CompoundTag readEntityChunk(int chunkX, int chunkZ) throws IOException {
         if (!io.papermc.paper.chunk.system.io.RegionFileIOThread.isRegionFileThread()) {
             return io.papermc.paper.chunk.system.io.RegionFileIOThread.loadData(
-                this, chunkX, chunkZ, io.papermc.paper.chunk.system.io.RegionFileIOThread.RegionFileType.ENTITY_DATA,
-                io.papermc.paper.chunk.system.io.RegionFileIOThread.getIOBlockingPriorityForCurrentThread()
+                    this, chunkX, chunkZ, io.papermc.paper.chunk.system.io.RegionFileIOThread.RegionFileType.ENTITY_DATA,
+                    io.papermc.paper.chunk.system.io.RegionFileIOThread.getIOBlockingPriorityForCurrentThread()
             );
         }
         return this.entityStorage.read(new ChunkPos(chunkX, chunkZ));
@@ -540,8 +535,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
         this.entityTickList = new EntityTickList();
         this.blockTicks = new LevelTicks<>(this::isPositionTickingWithEntitiesLoaded, this.getProfilerSupplier());
         this.fluidTicks = new LevelTicks<>(this::isPositionTickingWithEntitiesLoaded, this.getProfilerSupplier());
-        this.navigatingMobs = new ObjectOpenHashSet();
-        this.blockEvents = new ObjectLinkedOpenHashSet();
+        this.navigatingMobs = Sets.newConcurrentHashSet();
+        this.blockEvents = new ConcurrentLinkedDeque<>();
         this.blockEventsToReschedule = new ArrayList(64);
         this.dragonParts = new Int2ObjectOpenHashMap();
         this.tickTime = flag1;
@@ -751,20 +746,20 @@ public class ServerLevel extends Level implements WorldGenLevel {
                             }
 
                             //gameprofilerfiller.push("tick"); // Purpur
-                        // Pufferfish start - copied from this.guardEntityTick
-                        try {
-                            this.tickNonPassenger(entity); // Pufferfish - changed
-                            MinecraftServer.getServer().executeMidTickTasks(); // Tuinity - execute chunk tasks mid tick
-                        } catch (Throwable throwable) {
-                            if (throwable instanceof ThreadDeath) throw throwable; // Paper
-                            // Paper start - Prevent tile entity and entity crashes
-                            final String msg = String.format("Entity threw exception at %s:%s,%s,%s", entity.level.getWorld().getName(), entity.getX(), entity.getY(), entity.getZ());
-                            MinecraftServer.LOGGER.error(msg, throwable);
-                            getCraftServer().getPluginManager().callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerInternalException(msg, throwable)));
-                            entity.discard();
-                            // Paper end
-                        }
-                        // Pufferfish end
+                            // Pufferfish start - copied from this.guardEntityTick
+                            try {
+                                this.tickNonPassenger(entity); // Pufferfish - changed
+                                MinecraftServer.getServer().executeMidTickTasks(); // Tuinity - execute chunk tasks mid tick
+                            } catch (Throwable throwable) {
+                                if (throwable instanceof ThreadDeath) throw throwable; // Paper
+                                // Paper start - Prevent tile entity and entity crashes
+                                final String msg = String.format("Entity threw exception at %s:%s,%s,%s", entity.level.getWorld().getName(), entity.getX(), entity.getY(), entity.getZ());
+                                MinecraftServer.LOGGER.error(msg, throwable);
+                                getCraftServer().getPluginManager().callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerInternalException(msg, throwable)));
+                                entity.discard();
+                                // Paper end
+                            }
+                            // Pufferfish end
                             //gameprofilerfiller.pop(); // Purpur
                         }
                     }
@@ -801,8 +796,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
                     this.preciseTime += 12000 / (double) incrementTicks;
                     this.setDayTime(this.preciseTime);
                 } else
-                // Purpur end
-                this.setDayTime(this.levelData.getDayTime() + 1L);
+                    // Purpur end
+                    this.setDayTime(this.levelData.getDayTime() + 1L);
             }
 
         }
@@ -1054,7 +1049,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                     if (!org.purpurmc.purpur.PurpurConfig.sleepSkippingNight.equalsIgnoreCase("default")) {
                         ichatmutablecomponent = io.papermc.paper.adventure.PaperAdventure.asVanilla(net.kyori.adventure.text.minimessage.MiniMessage.miniMessage().deserialize(org.purpurmc.purpur.PurpurConfig.sleepSkippingNight));
                     } else
-                    ichatmutablecomponent = Component.translatable("sleep.skipping_night");
+                        ichatmutablecomponent = Component.translatable("sleep.skipping_night");
                 } else {
                     if (org.purpurmc.purpur.PurpurConfig.sleepingPlayersPercent.isBlank()) {
                         return;
@@ -1064,8 +1059,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
                                 net.kyori.adventure.text.minimessage.tag.resolver.Placeholder.parsed("count", Integer.toString(this.sleepStatus.amountSleeping())),
                                 net.kyori.adventure.text.minimessage.tag.resolver.Placeholder.parsed("total", Integer.toString(this.sleepStatus.sleepersNeeded(i)))));
                     } else
-                    // Purpur end
-                    ichatmutablecomponent = Component.translatable("sleep.players_sleeping", this.sleepStatus.amountSleeping(), this.sleepStatus.sleepersNeeded(i));
+                        // Purpur end
+                        ichatmutablecomponent = Component.translatable("sleep.players_sleeping", this.sleepStatus.amountSleeping(), this.sleepStatus.sleepersNeeded(i));
                 }
 
                 Iterator iterator = this.players.iterator();
@@ -1204,7 +1199,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
     private void resetWeatherCycle() {
         // CraftBukkit start
         if (this.purpurConfig.rainStopsAfterSleep) // Purpur
-        this.serverLevelData.setRaining(false, org.bukkit.event.weather.WeatherChangeEvent.Cause.SLEEP); // Paper - when passing the night
+            this.serverLevelData.setRaining(false, org.bukkit.event.weather.WeatherChangeEvent.Cause.SLEEP); // Paper - when passing the night
         // If we stop due to everyone sleeping we should reset the weather duration to some other random value.
         // Not that everyone ever manages to get the whole server to sleep at the same time....
         if (!this.serverLevelData.isRaining()) {
@@ -1212,7 +1207,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         }
         // CraftBukkit end
         if (this.purpurConfig.thunderStopsAfterSleep) // Purpur
-        this.serverLevelData.setThundering(false, org.bukkit.event.weather.ThunderChangeEvent.Cause.SLEEP); // Paper - when passing the night
+            this.serverLevelData.setThundering(false, org.bukkit.event.weather.ThunderChangeEvent.Cause.SLEEP); // Paper - when passing the night
         // CraftBukkit start
         // If we stop due to everyone sleeping we should reset the weather duration to some other random value.
         // Not that everyone ever manages to get the whole server to sleep at the same time....
@@ -1266,9 +1261,9 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 currentlyTickingEntity.lazySet(entity);
             }
             // Paper end - log detailed entity tick information
-        ++TimingHistory.entityTicks; // Paper - timings
-        // Spigot start
-        co.aikar.timings.Timing timer; // Paper
+            ++TimingHistory.entityTicks; // Paper - timings
+            // Spigot start
+            co.aikar.timings.Timing timer; // Paper
         /*if (!org.spigotmc.ActivationRange.checkIfActive(entity)) { // Paper - comment out - EAR 2, reimplement below
             entity.tickCount++;
             timer = entity.getType().inactiveTickTimer.startTiming(); try { // Paper - timings
@@ -1276,36 +1271,36 @@ public class ServerLevel extends Level implements WorldGenLevel {
             } finally { timer.stopTiming(); } // Paper
             return;
         }*/ // Paper - comment out EAR 2
-        // Spigot end
-        // Paper start- timings
-        final boolean isActive = org.spigotmc.ActivationRange.checkIfActive(entity);
-        //timer = isActive ? entity.getType().tickTimer.startTiming() : entity.getType().inactiveTickTimer.startTiming(); // Paper // Purpur
-        //try { // Purpur
-        // Paper end - timings
-        entity.setOldPosAndRot();
-        //ProfilerFiller gameprofilerfiller = this.getProfiler(); // Purpur
-
-        ++entity.tickCount;
+            // Spigot end
+            // Paper start- timings
+            final boolean isActive = org.spigotmc.ActivationRange.checkIfActive(entity);
+            //timer = isActive ? entity.getType().tickTimer.startTiming() : entity.getType().inactiveTickTimer.startTiming(); // Paper // Purpur
+            //try { // Purpur
+            // Paper end - timings
+            entity.setOldPosAndRot();
+            //ProfilerFiller gameprofilerfiller = this.getProfiler(); // Purpur
+
+            ++entity.tickCount;
         /*this.getProfiler().push(() -> { // Purpur
             return BuiltInRegistries.ENTITY_TYPE.getKey(entity.getType()).toString();
         });*/ // Purpur
-        //gameprofilerfiller.incrementCounter("tickNonPassenger"); // Purpur
-        if (isActive) { // Paper - EAR 2
-            TimingHistory.activatedEntityTicks++;
-        entity.tick();
-        entity.postTick(); // CraftBukkit
-        } else { entity.inactiveTick(); } // Paper - EAR 2
-        //this.getProfiler().pop(); // Purpur
-        //} finally { timer.stopTiming(); } // Paper - timings // Purpur
-        Iterator iterator = entity.getPassengers().iterator();
+            //gameprofilerfiller.incrementCounter("tickNonPassenger"); // Purpur
+            if (isActive) { // Paper - EAR 2
+                TimingHistory.activatedEntityTicks++;
+                entity.tick();
+                entity.postTick(); // CraftBukkit
+            } else { entity.inactiveTick(); } // Paper - EAR 2
+            //this.getProfiler().pop(); // Purpur
+            //} finally { timer.stopTiming(); } // Paper - timings // Purpur
+            Iterator iterator = entity.getPassengers().iterator();
 
-        while (iterator.hasNext()) {
-            Entity entity1 = (Entity) iterator.next();
+            while (iterator.hasNext()) {
+                Entity entity1 = (Entity) iterator.next();
 
-            this.tickPassenger(entity, entity1);
-        }
-        // } finally { timer.stopTiming(); } // Paper - timings - move up
-        // Paper start - log detailed entity tick information
+                this.tickPassenger(entity, entity1);
+            }
+            // } finally { timer.stopTiming(); } // Paper - timings - move up
+            // Paper start - log detailed entity tick information
         } finally {
             if (currentlyTickingEntity.get() == entity) {
                 currentlyTickingEntity.lazySet(null);
@@ -1332,8 +1327,8 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 //gameprofilerfiller.incrementCounter("tickPassenger"); // Purpur
                 // Paper start - EAR 2
                 if (isActive) {
-                passenger.rideTick();
-                passenger.postTick(); // CraftBukkit
+                    passenger.rideTick();
+                    passenger.postTick(); // CraftBukkit
                 } else {
                     passenger.setDeltaMovement(Vec3.ZERO);
                     passenger.inactiveTick();
@@ -1350,7 +1345,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                     this.tickPassenger(passenger, entity2);
                 }
 
-            //} finally { timer.stopTiming(); }// Paper - EAR2 timings // Purpur
+                //} finally { timer.stopTiming(); }// Paper - EAR2 timings // Purpur
             }
         } else {
             passenger.stopRiding();
@@ -1371,24 +1366,24 @@ public class ServerLevel extends Level implements WorldGenLevel {
         }
 
         //try (co.aikar.timings.Timing ignored = this.timings.worldSave.startTiming()) { // Purpur
-            if (doFull) {
-                this.saveLevelData();
-            }
+        if (doFull) {
+            this.saveLevelData();
+        }
 
-            //this.timings.worldSaveChunks.startTiming(); // Paper // Purpur
-            if (!this.noSave()) chunkproviderserver.saveIncrementally();
-            //this.timings.worldSaveChunks.stopTiming(); // Paper // Purpur
+        //this.timings.worldSaveChunks.startTiming(); // Paper // Purpur
+        if (!this.noSave()) chunkproviderserver.saveIncrementally();
+        //this.timings.worldSaveChunks.stopTiming(); // Paper // Purpur
 
-            // Copied from save()
-            // CraftBukkit start - moved from MinecraftServer.saveChunks
-            if (doFull) { // Paper
-                ServerLevel worldserver1 = this;
+        // Copied from save()
+        // CraftBukkit start - moved from MinecraftServer.saveChunks
+        if (doFull) { // Paper
+            ServerLevel worldserver1 = this;
 
-                this.serverLevelData.setWorldBorder(worldserver1.getWorldBorder().createSettings());
-                this.serverLevelData.setCustomBossEvents(this.server.getCustomBossEvents().save());
-                this.convertable.saveDataTag(this.server.registryAccess(), this.serverLevelData, this.server.getPlayerList().getSingleplayerData());
-            }
-            // CraftBukkit end
+            this.serverLevelData.setWorldBorder(worldserver1.getWorldBorder().createSettings());
+            this.serverLevelData.setCustomBossEvents(this.server.getCustomBossEvents().save());
+            this.convertable.saveDataTag(this.server.registryAccess(), this.serverLevelData, this.server.getPlayerList().getSingleplayerData());
+        }
+        // CraftBukkit end
         //} // Purpur
     }
     // Paper end
@@ -1413,10 +1408,10 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 progressListener.progressStage(Component.translatable("menu.savingChunks"));
             }
 
-                //timings.worldSaveChunks.startTiming(); // Paper // Purpur
+            //timings.worldSaveChunks.startTiming(); // Paper // Purpur
             if (!close) chunkproviderserver.save(flush); // Paper - rewrite chunk system
             if (close) chunkproviderserver.close(true); // Paper - rewrite chunk system
-                //timings.worldSaveChunks.stopTiming(); // Paper // Purpur
+            //timings.worldSaveChunks.stopTiming(); // Paper // Purpur
             //}// Paper // Purpur
             // Paper - rewrite chunk system - entity saving moved into ChunkHolder
 
@@ -1739,47 +1734,47 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
         this.getChunkSource().blockChanged(pos);
         if(this.paperConfig().misc.updatePathfindingOnBlockUpdate) { // Paper - option to disable pathfinding updates
-        VoxelShape voxelshape = oldState.getCollisionShape(this, pos);
-        VoxelShape voxelshape1 = newState.getCollisionShape(this, pos);
+            VoxelShape voxelshape = oldState.getCollisionShape(this, pos);
+            VoxelShape voxelshape1 = newState.getCollisionShape(this, pos);
 
-        if (Shapes.joinIsNotEmpty(voxelshape, voxelshape1, BooleanOp.NOT_SAME)) {
-            List<PathNavigation> list = new ObjectArrayList();
-            Iterator iterator = this.navigatingMobs.iterator();
+            if (Shapes.joinIsNotEmpty(voxelshape, voxelshape1, BooleanOp.NOT_SAME)) {
+                List<PathNavigation> list = new ObjectArrayList();
+                Iterator iterator = this.navigatingMobs.iterator();
 
-            while (iterator.hasNext()) {
-                // CraftBukkit start - fix SPIGOT-6362
-                Mob entityinsentient;
-                try {
-                    entityinsentient = (Mob) iterator.next();
-                } catch (java.util.ConcurrentModificationException ex) {
-                    // This can happen because the pathfinder update below may trigger a chunk load, which in turn may cause more navigators to register
-                    // In this case we just run the update again across all the iterators as the chunk will then be loaded
-                    // As this is a relative edge case it is much faster than copying navigators (on either read or write)
-                    this.sendBlockUpdated(pos, oldState, newState, flags);
-                    return;
-                }
-                // CraftBukkit end
-                PathNavigation navigationabstract = entityinsentient.getNavigation();
+                while (iterator.hasNext()) {
+                    // CraftBukkit start - fix SPIGOT-6362
+                    Mob entityinsentient;
+                    try {
+                        entityinsentient = (Mob) iterator.next();
+                    } catch (java.util.ConcurrentModificationException ex) {
+                        // This can happen because the pathfinder update below may trigger a chunk load, which in turn may cause more navigators to register
+                        // In this case we just run the update again across all the iterators as the chunk will then be loaded
+                        // As this is a relative edge case it is much faster than copying navigators (on either read or write)
+                        this.sendBlockUpdated(pos, oldState, newState, flags);
+                        return;
+                    }
+                    // CraftBukkit end
+                    PathNavigation navigationabstract = entityinsentient.getNavigation();
 
-                if (navigationabstract.shouldRecomputePath(pos)) {
-                    list.add(navigationabstract);
+                    if (navigationabstract.shouldRecomputePath(pos)) {
+                        list.add(navigationabstract);
+                    }
                 }
-            }
 
-            try {
-                this.isUpdatingNavigations = true;
-                iterator = list.iterator();
+                try {
+                    this.isUpdatingNavigations = true;
+                    iterator = list.iterator();
 
-                while (iterator.hasNext()) {
-                    PathNavigation navigationabstract1 = (PathNavigation) iterator.next();
+                    while (iterator.hasNext()) {
+                        PathNavigation navigationabstract1 = (PathNavigation) iterator.next();
 
-                    navigationabstract1.recomputePath();
+                        navigationabstract1.recomputePath();
+                    }
+                } finally {
+                    this.isUpdatingNavigations = false;
                 }
-            } finally {
-                this.isUpdatingNavigations = false;
-            }
 
-        }
+            }
         } // Paper
     }
 
@@ -1847,13 +1842,11 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
     private void runBlockEvents() {
         this.blockEventsToReschedule.clear();
-
-        while (!this.blockEvents.isEmpty()) {
-            BlockEventData blockactiondata = (BlockEventData) this.blockEvents.removeFirst();
-
+        BlockEventData blockactiondata;
+        while ((blockactiondata = this.blockEvents.pollFirst())!=null) {
             if (this.shouldTickBlocksAt(blockactiondata.pos())) {
                 if (this.doBlockEvent(blockactiondata)) {
-                    this.server.getPlayerList().broadcast((Player) null, (double) blockactiondata.pos().getX(), (double) blockactiondata.pos().getY(), (double) blockactiondata.pos().getZ(), 64.0D, this.dimension(), new ClientboundBlockEventPacket(blockactiondata.pos(), blockactiondata.block(), blockactiondata.paramA(), blockactiondata.paramB()));
+                    this.server.getPlayerList().broadcast(null, blockactiondata.pos().getX(), blockactiondata.pos().getY(), (double) blockactiondata.pos().getZ(), 64.0D, this.dimension(), new ClientboundBlockEventPacket(blockactiondata.pos(), blockactiondata.block(), blockactiondata.paramA(), blockactiondata.paramB()));
                 }
             } else {
                 this.blockEventsToReschedule.add(blockactiondata);
