From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: wangxyper <wangxyper@163.com>
Date: Thu, 5 Jan 2023 09:08:17 +0800
Subject: [PATCH] Akarin-Async userlist saving and KeYi-Skip entity move if no
 movement


diff --git a/src/main/java/net/minecraft/server/players/StoredUserList.java b/src/main/java/net/minecraft/server/players/StoredUserList.java
index 4fd709a550bf8da1e996894a1ca6b91206c31e9e..b43a7c3aea930805ea917176d4a7b5564be084cb 100644
--- a/src/main/java/net/minecraft/server/players/StoredUserList.java
+++ b/src/main/java/net/minecraft/server/players/StoredUserList.java
@@ -23,6 +23,8 @@ import java.util.Map;
 import java.util.Objects;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
+import io.papermc.paper.util.MCUtil;
 import net.minecraft.Util;
 import net.minecraft.util.GsonHelper;
 import org.slf4j.Logger;
@@ -148,37 +150,43 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
     }
 
     public void save() throws IOException {
-        this.removeExpired(); // Paper - remove expired values before saving
-        JsonArray jsonarray = new JsonArray();
-        Stream<JsonObject> stream = this.map.values().stream().map((jsonlistentry) -> { // CraftBukkit - decompile error
-            JsonObject jsonobject = new JsonObject();
+        Runnable saveTask = ()->{ // Akarin - Save json list async
+            this.removeExpired(); // Paper - remove expired values before saving
+            JsonArray jsonarray = new JsonArray();
+            Stream<JsonObject> stream = this.map.values().stream().map((jsonlistentry) -> { // CraftBukkit - decompile error
+                JsonObject jsonobject = new JsonObject();
+
+                Objects.requireNonNull(jsonlistentry);
+                return (JsonObject) Util.make(jsonobject, jsonlistentry::serialize);
+            });
+
+            Objects.requireNonNull(jsonarray);
+            stream.forEach(jsonarray::add);
+            try {
+                BufferedWriter bufferedwriter = Files.newWriter(this.file, StandardCharsets.UTF_8);
 
-            Objects.requireNonNull(jsonlistentry);
-            return (JsonObject) Util.make(jsonobject, jsonlistentry::serialize);
-        });
+                try {
+                    StoredUserList.GSON.toJson(jsonarray, bufferedwriter);
+                } catch (Throwable throwable) {
+                    if (bufferedwriter != null) {
+                        try {
+                            bufferedwriter.close();
+                        } catch (Throwable throwable1) {
+                            throwable.addSuppressed(throwable1);
+                        }
+                    }
 
-        Objects.requireNonNull(jsonarray);
-        stream.forEach(jsonarray::add);
-        BufferedWriter bufferedwriter = Files.newWriter(this.file, StandardCharsets.UTF_8);
+                    throw throwable;
+                }
 
-        try {
-            StoredUserList.GSON.toJson(jsonarray, bufferedwriter);
-        } catch (Throwable throwable) {
-            if (bufferedwriter != null) {
-                try {
+                if (bufferedwriter != null) {
                     bufferedwriter.close();
-                } catch (Throwable throwable1) {
-                    throwable.addSuppressed(throwable1);
                 }
+            }catch (Exception e){
+                StoredUserList.LOGGER.warn("Failed to async save " + this.file, e); // Akarin - Save json list async
             }
-
-            throw throwable;
-        }
-
-        if (bufferedwriter != null) {
-            bufferedwriter.close();
-        }
-
+        };
+        MCUtil.scheduleAsyncTask(saveTask); // Akarin - Save json list async
     }
 
     public void load() throws IOException {
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 230d9a08049c3c7bfa61c38844f3da26b260dce0..6e418ced1d69a853efc8c4e70e20845257c545f6 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -163,6 +163,8 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         return tag.contains("Bukkit.updateLevel") && tag.getInt("Bukkit.updateLevel") >= level;
     }
 
+    private boolean boundingBoxChanged = false; // KeYi
+
     // Paper start
     public static RandomSource SHARED_RANDOM = new RandomRandomSource();
     private static final class RandomRandomSource extends java.util.Random implements net.minecraft.world.level.levelgen.BitRandomSource {
@@ -1036,6 +1038,11 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     // Paper end - detailed watchdog information
 
     public void move(MoverType movementType, Vec3 movement) {
+        // KeYi start
+        if (!this.boundingBoxChanged && movement.equals(Vec3.ZERO)) {
+            this.boundingBoxChanged = false;
+            return;
+        }// KeYi end
         // Paper start - detailed watchdog information
         io.papermc.paper.util.TickThread.ensureTickThread("Cannot move an entity off-main");
         synchronized (this.posLock) {
@@ -3837,6 +3844,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public final void setBoundingBox(AABB boundingBox) {
+        if (!this.bb.equals(boundingBox)) boundingBoxChanged = true;
         // CraftBukkit start - block invalid bounding boxes
         double minX = boundingBox.minX,
                 minY = boundingBox.minY,
