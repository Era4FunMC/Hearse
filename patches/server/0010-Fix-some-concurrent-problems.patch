From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: wangxyper <wangxyper@163.com>
Date: Sat, 7 Jan 2023 21:30:13 +0800
Subject: [PATCH] Fix some concurrent problems


diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 4ac0a4eb95ab34a3409b66ee8d96af0846c6ec8c..74fa8727916022bccf0bf454baae8018614f4487 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -1,5 +1,6 @@
 package net.minecraft.server.level;
 
+import co.m2ek4u.hearse.ForkJoinTickThread;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.Lists;
 import com.mojang.datafixers.DataFixer;
@@ -446,7 +447,7 @@ public class ServerChunkCache extends ChunkSource {
                 // Paper end
                 com.destroystokyo.paper.io.SyncLoadFinder.logSyncLoad(this.level, x1, z1); // Paper - sync load info
                 //this.level.timings.syncChunkLoad.startTiming(); // Paper // Purpur
-            chunkproviderserver_b.managedBlock(completablefuture::isDone);
+                chunkproviderserver_b.managedBlock(completablefuture::isDone);
                 io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.popChunkWait(); // Paper - async chunk debug  // Paper - rewrite chunk system
                 //this.level.timings.syncChunkLoad.stopTiming(); // Paper // Purpur
             } // Paper
@@ -505,6 +506,7 @@ public class ServerChunkCache extends ChunkSource {
         // Paper start - add isUrgent - old sig left in place for dirty nms plugins
         return getChunkFutureMainThread(chunkX, chunkZ, leastStatus, create, false);
     }
+
     private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> getChunkFutureMainThread(int chunkX, int chunkZ, ChunkStatus leastStatus, boolean create, boolean isUrgent) {
         // Paper start - rewrite chunk system
         io.papermc.paper.util.TickThread.ensureTickThread(this.level, chunkX, chunkZ, "Scheduling chunk load off-main");
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 059b140caff9e872e8c3fcea7fc446b0f5249e31..2d14b888554f51455aa55471b36b369d3e10a1a3 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -679,12 +679,12 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
             org.spigotmc.ActivationRange.activateEntities(this); // Spigot
             //timings.entityTick.startTiming(); // Spigot // Purpur
+            for (int k = 0; k < Math.min(1000,this.entityTickList.entities.size()); k++) {
+                MinecraftServer.getServer().executeMidTickTasks(); // Tuinity - execute chunk tasks mid tick //Hearse -- Move up
+            }
             this.entityTickList.forEach((entity) -> {
                 entity.activatedPriorityReset = false;
                 if (!entity.isRemoved()) {
-                    synchronized (this.entityTickList){
-                        MinecraftServer.getServer().executeMidTickTasks(); // Tuinity - execute chunk tasks mid tick //Hearse -- Move up
-                    }
                     if (false) { // CraftBukkit - We prevent spawning in general, so this butchering is not needed
                         entity.discard();
                     } else {
diff --git a/src/main/java/net/minecraft/world/ticks/LevelChunkTicks.java b/src/main/java/net/minecraft/world/ticks/LevelChunkTicks.java
index ac807277a6b26d140ea9873d17c7aa4fb5fe37b2..abc8efe0cf6cec1a8bf8b39538fc2afa0112c74d 100644
--- a/src/main/java/net/minecraft/world/ticks/LevelChunkTicks.java
+++ b/src/main/java/net/minecraft/world/ticks/LevelChunkTicks.java
@@ -29,17 +29,16 @@ public class LevelChunkTicks<T> implements SerializableTickContainer<T>, TickCon
     private boolean dirty;
     private long lastSaved = Long.MIN_VALUE;
 
-    public boolean isDirty(final long tick) {
+    public synchronized boolean isDirty(final long tick) {
         return this.dirty || (!this.tickQueue.isEmpty() && tick != this.lastSaved);
     }
 
-    public void clearDirty() {
+    public synchronized void clearDirty() {
         this.dirty = false;
     }
     // Paper end - add dirty flag
 
-    public LevelChunkTicks() {
-    }
+    public LevelChunkTicks() {}
 
     public LevelChunkTicks(List<SavedTick<T>> ticks) {
         this.pendingTicks = ticks;
@@ -50,17 +49,17 @@ public class LevelChunkTicks<T> implements SerializableTickContainer<T>, TickCon
 
     }
 
-    public void setOnTickAdded(@Nullable BiConsumer<LevelChunkTicks<T>, ScheduledTick<T>> tickConsumer) {
+    public synchronized void setOnTickAdded(@Nullable BiConsumer<LevelChunkTicks<T>, ScheduledTick<T>> tickConsumer) {
         this.onTickAdded = tickConsumer;
     }
 
     @Nullable
-    public ScheduledTick<T> peek() {
+    public synchronized ScheduledTick<T> peek() {
         return this.tickQueue.peek();
     }
 
     @Nullable
-    public ScheduledTick<T> poll() {
+    public synchronized ScheduledTick<T> poll() {
         ScheduledTick<T> scheduledTick = this.tickQueue.poll();
         if (scheduledTick != null) {
             this.dirty = true; // Paper - add dirty flag
@@ -71,12 +70,11 @@ public class LevelChunkTicks<T> implements SerializableTickContainer<T>, TickCon
     }
 
     @Override
-    public void schedule(ScheduledTick<T> orderedTick) {
+    public synchronized void schedule(ScheduledTick<T> orderedTick) {
         if (this.ticksPerPosition.add(orderedTick)) {
             this.dirty = true; // Paper - add dirty flag
             this.scheduleUnchecked(orderedTick);
         }
-
     }
 
     private void scheduleUnchecked(ScheduledTick<T> orderedTick) {
@@ -88,11 +86,11 @@ public class LevelChunkTicks<T> implements SerializableTickContainer<T>, TickCon
     }
 
     @Override
-    public boolean hasScheduledTick(BlockPos pos, T type) {
+    public synchronized boolean hasScheduledTick(BlockPos pos, T type) {
         return this.ticksPerPosition.contains(ScheduledTick.probe(type, pos));
     }
 
-    public void removeIf(Predicate<ScheduledTick<T>> predicate) {
+    public synchronized void removeIf(Predicate<ScheduledTick<T>> predicate) {
         Iterator<ScheduledTick<T>> iterator = this.tickQueue.iterator();
 
         while(iterator.hasNext()) {
@@ -105,17 +103,17 @@ public class LevelChunkTicks<T> implements SerializableTickContainer<T>, TickCon
 
     }
 
-    public Stream<ScheduledTick<T>> getAll() {
+    public synchronized Stream<ScheduledTick<T>> getAll() {
         return this.tickQueue.stream();
     }
 
     @Override
-    public int count() {
+    public synchronized int count() {
         return this.tickQueue.size() + (this.pendingTicks != null ? this.pendingTicks.size() : 0);
     }
 
     @Override
-    public ListTag save(long l, Function<T, String> function) {
+    public synchronized ListTag save(long l, Function<T, String> function) {
         this.lastSaved = l; // Paper - add dirty system to level ticks
         ListTag listTag = new ListTag();
         if (this.pendingTicks != null) {
@@ -131,7 +129,7 @@ public class LevelChunkTicks<T> implements SerializableTickContainer<T>, TickCon
         return listTag;
     }
 
-    public void unpack(long time) {
+    public synchronized void unpack(long time) {
         if (this.pendingTicks != null) {
             // Paper start - add dirty system to level chunk ticks
             if (this.tickQueue.isEmpty()) {
