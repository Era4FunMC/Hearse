From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: wangxyper <wangxyper@163.com>
Date: Mon, 16 Jan 2023 14:17:32 +0800
Subject: [PATCH] Fix a deadlock in EntityLookup


diff --git a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
index ec8982b89cde24eefd3d392eed3e6cc926053dff..14e87135513c0f5fc1e16beae3ea596f9c23a542 100644
--- a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
+++ b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
@@ -37,6 +37,8 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.NoSuchElementException;
 import java.util.UUID;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
 import java.util.concurrent.locks.StampedLock;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
@@ -52,7 +54,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
     public final ServerLevel world;
 
     private final StampedLock entityByLock = new StampedLock();
-    private final Object chunkEntitySlicesLock = new Object();
+    private final Lock chunkEntitySlicesLock = new ReentrantLock(true);
 
     protected final Long2ObjectMap<ChunkSlicesRegion> regions = Long2ObjectMaps.synchronize(new Long2ObjectOpenHashMap<>(128, 0.5f));
 
@@ -374,8 +376,11 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
             throw new IllegalStateException("Only call Entity#setRemoved to remove an entity");
         }
         ChunkEntitySlices slices;
-        synchronized (this.chunkEntitySlicesLock){
+        this.chunkEntitySlicesLock.lock();
+        try {
             slices = this.getChunk(sectionX, sectionZ);
+        }finally {
+            this.chunkEntitySlicesLock.unlock();
         }
         // all entities should be in a chunk
         if (slices == null) {
@@ -420,8 +425,11 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         TickThread.ensureTickThread(this.world, entity.sectionX, entity.sectionZ, "Cannot move entity off-main");
 
         ChunkEntitySlices old;
-        synchronized (this.chunkEntitySlicesLock){
+        this.chunkEntitySlicesLock.lock();
+        try {
             old = this.getChunk(entity.sectionX, entity.sectionZ);
+        }finally {
+            this.chunkEntitySlicesLock.unlock();
         }
         final ChunkEntitySlices slices = this.getOrCreateChunk(newSectionX, newSectionZ);
 
@@ -641,14 +649,17 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Cannot load in entity section off-main");
         synchronized (this) {
             final ChunkEntitySlices curr = this.getChunk(chunkX, chunkZ);
-            synchronized (this.chunkEntitySlicesLock){
-                if (curr != null) {
+            if (curr != null) {
+                this.chunkEntitySlicesLock.lock();
+                try {
                     this.removeChunk(chunkX, chunkZ);
                     curr.mergeInto(slices);
                     this.addChunk(chunkX, chunkZ, slices);
-                } else {
-                    this.addChunk(chunkX, chunkZ, slices);
+                }finally {
+                    this.chunkEntitySlicesLock.unlock();
                 }
+            } else {
+                this.addChunk(chunkX, chunkZ, slices);
             }
         }
     }
@@ -656,9 +667,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
 
     public void entitySectionUnload(final int chunkX, final int chunkZ) {
         TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Cannot unload entity section off-main");
-        synchronized (this.chunkEntitySlicesLock){
-            this.removeChunk(chunkX, chunkZ);
-        }
+        this.removeChunk(chunkX, chunkZ);
     }
 
     public ChunkEntitySlices getChunk(final int chunkX, final int chunkZ) {
