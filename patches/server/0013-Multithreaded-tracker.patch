From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: wangxyper <wangxyper@163.com>
Date: Wed, 18 Jan 2023 14:39:00 +0800
Subject: [PATCH] Multithreaded tracker


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 74979db25eb4850e771c23d063d0b82965e32e12..f4798aeb15386099bbbb4f108ca8a4770ebe800c 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1,7 +1,6 @@
 package net.minecraft.server;
 
 import co.earthme.hearse.Hearse;
-import co.earthme.hearse.HearseConfig;
 import co.earthme.hearse.server.ServerEntityTickHook;
 import co.earthme.hearse.server.ServerLevelTickHook;
 import com.google.common.base.Splitter;
@@ -1412,7 +1411,6 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         //isOversleep = false;MinecraftTimings.serverOversleep.stopTiming(); // Purpur
         // Paper end
         new com.destroystokyo.paper.event.server.ServerTickStartEvent(this.tickCount+1).callEvent(); // Paper
-        ServerEntityTickHook.callTickStart();
         ++this.tickCount;
         this.tickChildren(shouldKeepTicking);
 
@@ -1553,6 +1551,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             //this.profiler.push("tick"); // Purpur
             ServerLevelTickHook.callWorldTick(worldserver,shouldKeepTicking);
         }
+        ServerEntityTickHook.awaitEntityTasks();
         ServerLevelTickHook.awaitWorldTicKTasks();
         this.isIteratingOverLevels = false; // Paper
 
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 90d3138a564754cce57723e8a44d99ec3f378fc8..3f1969af92e2a9d0ecc109999d2f23c185ff4516 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -1,5 +1,9 @@
 package net.minecraft.server.level;
 
+import co.earthme.hearse.Hearse;
+import co.earthme.hearse.HearseConfig;
+import co.earthme.hearse.concurrent.WorkerThreadPoolExecutor;
+import co.earthme.hearse.concurrent.threadfactory.DefaultWorkerFactory;
 import com.google.common.collect.*;
 import com.google.common.collect.ImmutableList.Builder;
 import com.google.gson.JsonElement;
@@ -13,10 +17,7 @@ import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.longs.*;
-import it.unimi.dsi.fastutil.objects.ObjectIterator;
-import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet;
-import it.unimi.dsi.fastutil.objects.ReferenceSet;
-import it.unimi.dsi.fastutil.objects.ReferenceSets;
+import it.unimi.dsi.fastutil.objects.*;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
@@ -61,10 +62,8 @@ import java.io.IOException;
 import java.io.Writer;
 import java.nio.file.Path;
 import java.util.*;
-import java.util.concurrent.CancellationException;
-import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.CompletionException;
-import java.util.concurrent.Executor;
+import java.util.concurrent.*;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.*;
 
@@ -1194,78 +1193,90 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         entity.tracker = null; // Paper - We're no longer tracked
     }
 
+    private final Executor asyncTrackWorker = new WorkerThreadPoolExecutor(
+            0,
+            2,
+            5L,
+            TimeUnit.SECONDS,
+            new LinkedBlockingQueue<>(),
+            new DefaultWorkerFactory("tracker-async"));
+    private static WorkerThreadPoolExecutor concurrentTrackWorker = null;
+    private final AtomicInteger totalRunning = new AtomicInteger(0);
+    private static final AtomicBoolean isInited = new AtomicBoolean(false);
+    private static final AtomicBoolean enabled = new AtomicBoolean();
+
+    public static void tryInitIfNotInited(){
+        if (!isInited.get()){
+            enabled.set(HearseConfig.getBoolean("optimizations.enable-multithreaded-tracker",true));
+            if (enabled.get()){
+                final int threadCount = HearseConfig.getInt("workers.multithreaded-tracker-thread-count",Runtime.getRuntime().availableProcessors());
+                concurrentTrackWorker = new WorkerThreadPoolExecutor(
+                        threadCount,
+                        threadCount,
+                        5L,
+                        TimeUnit.SECONDS,
+                        new LinkedBlockingQueue<>(),
+                        new DefaultWorkerFactory("tracker-concurrent"));
+                Hearse.getWorkerManager().addWorker("tracker",concurrentTrackWorker);
+            }
+            isInited.set(true);
+        }
+    }
+
     // Paper start - optimised tracker
     private final void processTrackQueue() {
-        //this.level.timings.tracker1.startTiming(); // Purpur
-        try {
+        tryInitIfNotInited();
+
+        if (!enabled.get()){
             for (TrackedEntity tracker : this.entityMap.values()) {
-                // update tracker entry
                 tracker.updatePlayers(tracker.entity.getPlayersInTrackRange());
             }
-        } finally {
-            //this.level.timings.tracker1.stopTiming(); // Purpur
-        }
-
 
-        //this.level.timings.tracker2.startTiming(); // Purpur
-        try {
             for (TrackedEntity tracker : this.entityMap.values()) {
                 tracker.serverEntity.sendChanges();
             }
-        } finally {
-            //this.level.timings.tracker2.stopTiming(); // Purpur
+            return;
         }
-    }
-    // Paper end - optimised tracker
 
-    protected void tick() {
-        // Paper start - optimized tracker
-        if (true) {
-            this.processTrackQueue();
+        if(this.totalRunning.get() > 0){
             return;
         }
-        // Paper end - optimized tracker
-        List<ServerPlayer> list = Lists.newArrayList();
-        List<ServerPlayer> list1 = this.level.players();
-        Iterator objectiterator = this.entityMap.values().iterator();
-        //level.timings.tracker1.startTiming(); // Paper // Purpur
-
-        ChunkMap.TrackedEntity playerchunkmap_entitytracker;
-
-        while (objectiterator.hasNext()) {
-            playerchunkmap_entitytracker = (ChunkMap.TrackedEntity) objectiterator.next();
-            SectionPos sectionposition = playerchunkmap_entitytracker.lastSectionPos;
-            SectionPos sectionposition1 = SectionPos.of((EntityAccess) playerchunkmap_entitytracker.entity);
-            boolean flag = !Objects.equals(sectionposition, sectionposition1);
-
-            if (flag) {
-                playerchunkmap_entitytracker.updatePlayers(list1);
-                Entity entity = playerchunkmap_entitytracker.entity;
-
-                if (entity instanceof ServerPlayer) {
-                    list.add((ServerPlayer) entity);
-                }
-
-                playerchunkmap_entitytracker.lastSectionPos = sectionposition1;
-            }
 
-            if (flag || this.distanceManager.inEntityTickingRange(sectionposition1.chunk().toLong())) {
-                playerchunkmap_entitytracker.serverEntity.sendChanges();
+        this.totalRunning.set(2);
+
+        this.asyncTrackWorker.execute(()->{
+            //this.level.timings.tracker1.startTiming(); // Purpur
+            try {
+                CompletableFuture.allOf(this.entityMap.values()
+                        .stream()
+                        .map(tracker -> CompletableFuture.runAsync(()->{
+                            tracker.updatePlayers(tracker.entity.getPlayersInTrackRange());
+                        },concurrentTrackWorker))
+                        .toArray(CompletableFuture[]::new)).join();
+            } finally {
+                //this.level.timings.tracker1.stopTiming(); // Purpur
+                this.totalRunning.getAndDecrement();
             }
-        }
-        //level.timings.tracker1.stopTiming(); // Paper // Purpur
-
-        if (!list.isEmpty()) {
-            objectiterator = this.entityMap.values().iterator();
+        });
 
-            //level.timings.tracker2.startTiming(); // Paper // Purpur
-            while (objectiterator.hasNext()) {
-                playerchunkmap_entitytracker = (ChunkMap.TrackedEntity) objectiterator.next();
-                playerchunkmap_entitytracker.updatePlayers(list);
+        this.asyncTrackWorker.execute(()->{
+            //this.level.timings.tracker2.startTiming(); // Purpur
+            try {
+                for (TrackedEntity tracker : this.entityMap.values()) {
+                    tracker.serverEntity.sendChanges();
+                }
+            } finally {
+                //this.level.timings.tracker2.stopTiming(); // Purpur
+                this.totalRunning.getAndDecrement();
             }
-            //level.timings.tracker2.stopTiming(); // Paper // Purpur
-        }
+        });
+    }
+    // Paper end - optimised tracker
 
+    protected void tick() {
+        // Paper start - optimized tracker
+        this.processTrackQueue();
+        // Paper end - optimized tracker
     }
 
     public void broadcast(Entity entity, Packet<?> packet) {
@@ -1446,7 +1457,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         final Entity entity;
         private final int range;
         SectionPos lastSectionPos;
-        public final Set<ServerPlayerConnection> seenBy = new ReferenceOpenHashSet<>(); // Paper - optimise map impl
+        public final Set<ServerPlayerConnection> seenBy = Sets.newConcurrentHashSet(); // Paper - optimise map impl //Hearse - multithread tracker
 
         public TrackedEntity(Entity entity, int i, int j, boolean flag) {
             this.serverEntity = new ServerEntity(ChunkMap.this.level, entity, j, flag, this::broadcast, this.seenBy); // CraftBukkit
@@ -1464,12 +1475,11 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
             if (newTrackerCandidates != null) {
                 Object[] rawData = newTrackerCandidates.getBackingSet();
-                for (int i = 0, len = rawData.length; i < len; ++i) {
-                    Object raw = rawData[i];
+                for (Object raw : rawData) {
                     if (!(raw instanceof ServerPlayer)) {
                         continue;
                     }
-                    ServerPlayer player = (ServerPlayer)raw;
+                    ServerPlayer player = (ServerPlayer) raw;
                     this.updatePlayer(player);
                 }
             }
@@ -1500,14 +1510,9 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         }
 
         public void broadcast(Packet<?> packet) {
-            Iterator iterator = this.seenBy.iterator();
-
-            while (iterator.hasNext()) {
-                ServerPlayerConnection serverplayerconnection = (ServerPlayerConnection) iterator.next();
-
+            for (ServerPlayerConnection serverplayerconnection : this.seenBy) {
                 serverplayerconnection.send(packet);
             }
-
         }
 
         public void broadcastAndSend(Packet<?> packet) {
@@ -1519,14 +1524,9 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         }
 
         public void broadcastRemoved() {
-            Iterator iterator = this.seenBy.iterator();
-
-            while (iterator.hasNext()) {
-                ServerPlayerConnection serverplayerconnection = (ServerPlayerConnection) iterator.next();
-
+            for (ServerPlayerConnection serverplayerconnection : this.seenBy) {
                 this.serverEntity.removePairing(serverplayerconnection.getPlayer());
             }
-
         }
 
         public void removePlayer(ServerPlayer player) {
@@ -1534,7 +1534,6 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             if (this.seenBy.remove(player.connection)) {
                 this.serverEntity.removePairing(player);
             }
-
         }
 
         public void updatePlayer(ServerPlayer player) {
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 24c629ce5febfb0438ff1811fbe8ba4ae6f41488..2caa5ab3a7b4bf0c535863f5ff54fcb8c0dc3c59 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -1,5 +1,6 @@
 package net.minecraft.server.level;
 
+import ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor;
 import co.earthme.hearse.concurrent.thread.Worker;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.Lists;
@@ -378,7 +379,7 @@ public class ServerChunkCache extends ChunkSource {
     }
     // Paper end - async chunk io
 
-    private final Object workerGetChunkLock = new Object();
+    private final Object schedulingMutex = new Object();
 
     @Nullable
     @Override
@@ -388,58 +389,46 @@ public class ServerChunkCache extends ChunkSource {
                 return this.getChunk(x, z, leastStatus, create);
             }, this.mainThreadProcessor).join();
         } else {
-            if (Thread.currentThread() instanceof Worker){
-                synchronized (this.workerGetChunkLock){
-                    return this.getChunkUnsafe(x,z,leastStatus,create);
-                }
+            final int x1 = x; final int z1 = z; // Paper - conflict on variable change
+            //ProfilerFiller gameprofilerfiller = this.level.getProfiler(); // Purpur
+            LevelChunk ifLoaded = this.getChunkAtIfLoadedMainThread(x, z);
+            if (ifLoaded != null) {
+                return ifLoaded;
             }
-            return this.getChunkUnsafe(x,z,leastStatus,create);
-        }
-    }
+            //gameprofilerfiller.incrementCounter("getChunk"); // Purpur
+            long k = ChunkPos.asLong(x, z);
 
-    private ChunkAccess getChunkUnsafe(int x,int z,ChunkStatus leastStatus,boolean create){
-        final int x1 = x; final int z1 = z; // Paper - conflict on variable change
-        // Paper start - optimise for loaded chunks
-        LevelChunk ifLoaded = this.getChunkAtIfLoadedMainThread(x, z);
-        if (ifLoaded != null) {
-            return ifLoaded;
-        }
-        // Paper end
-        //ProfilerFiller gameprofilerfiller = this.level.getProfiler(); // Purpur
-
-        //gameprofilerfiller.incrementCounter("getChunk"); // Purpur
-        long k = ChunkPos.asLong(x, z);
+            ChunkAccess ichunkaccess;
 
-        ChunkAccess ichunkaccess;
+            // Paper - rewrite chunk system - there are no correct callbacks to remove items from cache in the new chunk system
 
-        // Paper - rewrite chunk system - there are no correct callbacks to remove items from cache in the new chunk system
-
-        //gameprofilerfiller.incrementCounter("getChunkCacheMiss"); // Purpur
-        CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.getChunkFutureMainThread(x, z, leastStatus, create, true); // Paper
-        ServerChunkCache.MainThreadExecutor chunkproviderserver_b = this.mainThreadProcessor;
+            //gameprofilerfiller.incrementCounter("getChunkCacheMiss"); // Purpur
+            CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.getChunkFutureMainThread(x, z, leastStatus, create, true); // Paper
+            ServerChunkCache.MainThreadExecutor chunkproviderserver_b = this.mainThreadProcessor;
 
-        Objects.requireNonNull(completablefuture);
-        if (!completablefuture.isDone()) { // Paper
-            // Paper start - async chunk io/loading
-            io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.pushChunkWait(this.level, x1, z1); // Paper - rewrite chunk system
-            // Paper end
-            com.destroystokyo.paper.io.SyncLoadFinder.logSyncLoad(this.level, x1, z1); // Paper - sync load info
-            //this.level.timings.syncChunkLoad.startTiming(); // Paper // Purpur
-            chunkproviderserver_b.managedBlock(completablefuture::isDone);
-            io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.popChunkWait(); // Paper - async chunk debug  // Paper - rewrite chunk system
-            //this.level.timings.syncChunkLoad.stopTiming(); // Paper // Purpur
-        } // Paper
-        ichunkaccess = (ChunkAccess) ((Either) completablefuture.join()).map((ichunkaccess1) -> {
-            return ichunkaccess1;
-        }, (playerchunk_failure) -> {
-            if (create) {
-                throw (IllegalStateException) Util.pauseInIde(new IllegalStateException("Chunk not there when requested: " + playerchunk_failure));
-            } else {
-                return null;
-            }
-        });
-        this.storeInCache(k, ichunkaccess, leastStatus);
-        return ichunkaccess;
+            Objects.requireNonNull(completablefuture);
+            if (!completablefuture.isDone()) { // Paper
+                // Paper start - async chunk io/loading
+                io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.pushChunkWait(this.level, x1, z1); // Paper - rewrite chunk system
+                // Paper end
+                com.destroystokyo.paper.io.SyncLoadFinder.logSyncLoad(this.level, x1, z1); // Paper - sync load info
+                //this.level.timings.syncChunkLoad.startTiming(); // Paper // Purpur
+                chunkproviderserver_b.managedBlock(completablefuture::isDone);
+                io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.popChunkWait(); // Paper - async chunk debug  // Paper - rewrite chunk system
+                //this.level.timings.syncChunkLoad.stopTiming(); // Paper // Purpur
+            } // Paper
+            ichunkaccess = (ChunkAccess) ((Either) completablefuture.join()).map((ichunkaccess1) -> {
+                return ichunkaccess1;
+            }, (playerchunk_failure) -> {
+                if (create) {
+                    throw (IllegalStateException) Util.pauseInIde(new IllegalStateException("Chunk not there when requested: " + playerchunk_failure));
+                } else {
+                    return null;
+                }
+            });
+            this.storeInCache(k, ichunkaccess, leastStatus);
+            return ichunkaccess;
+        }
     }
 
     @Nullable
@@ -510,9 +499,9 @@ public class ServerChunkCache extends ChunkSource {
             };
 
             this.level.chunkTaskScheduler.scheduleChunkLoad(
-                chunkX, chunkZ, leastStatus, true,
-                isUrgent ? ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor.Priority.BLOCKING : ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor.Priority.NORMAL,
-                complete
+                    chunkX, chunkZ, leastStatus, true,
+                    isUrgent ? PrioritisedExecutor.Priority.BLOCKING : PrioritisedExecutor.Priority.NORMAL,
+                    complete
             );
 
             return ret;
diff --git a/src/main/java/net/minecraft/server/level/ServerEntity.java b/src/main/java/net/minecraft/server/level/ServerEntity.java
index 0f9a3a6c05fee59c29764f0c0d7a6cb8a2a861b1..ac00733448c9daebd9aa9626f3750ba0cb0e4031 100644
--- a/src/main/java/net/minecraft/server/level/ServerEntity.java
+++ b/src/main/java/net/minecraft/server/level/ServerEntity.java
@@ -3,14 +3,12 @@ package net.minecraft.server.level;
 import com.google.common.collect.Lists;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Objects;
-import java.util.Set;
+
+import java.util.*;
 import java.util.function.Consumer;
 import javax.annotation.Nullable;
+
+import it.unimi.dsi.fastutil.objects.ObjectArraySet;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientGamePacketListener;
 import net.minecraft.network.protocol.game.ClientboundMoveEntityPacket;
@@ -373,7 +371,7 @@ public class ServerEntity {
         }
 
         if (this.entity instanceof LivingEntity) {
-            Set<AttributeInstance> set = ((LivingEntity) this.entity).getAttributes().getDirtyAttributes();
+            List<AttributeInstance> set = new ArrayList<>(((LivingEntity) this.entity).getAttributes().getDirtyAttributes());
 
             if (!set.isEmpty()) {
                 // CraftBukkit start - Send scaled max health
@@ -394,6 +392,5 @@ public class ServerEntity {
         if (this.entity instanceof ServerPlayer) {
             ((ServerPlayer) this.entity).connection.send(packet);
         }
-
     }
 }
