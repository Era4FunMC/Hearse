From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: wangxyper <wangxyper@163.com>
Date: Fri, 6 Jan 2023 16:26:29 +0800
Subject: [PATCH] Remove async entity travel and ai and add parallel entity
 ticking


diff --git a/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java b/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
index eb26ee51eac702fd09805afc1d8b3931bb80b2de..5db449ad0acb9849e689b607b21aa30c10d387ee 100644
--- a/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
+++ b/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
@@ -367,7 +367,7 @@ public final class ChunkEntitySlices {
         protected final ChunkEntitySlices manager;
         protected final long[] nonEmptyBitset;
         protected final BasicEntityList<Entity>[] entitiesBySection;
-        protected int count;
+        protected volatile int count;
 
         public EntityCollectionBySection(final ChunkEntitySlices manager) {
             this.manager = manager;
@@ -378,7 +378,7 @@ public final class ChunkEntitySlices {
             this.entitiesBySection = new BasicEntityList[sectionCount];
         }
 
-        public synchronized void addEntity(final Entity entity, final int sectionIndex) {
+        public void addEntity(final Entity entity, final int sectionIndex) {
             BasicEntityList<Entity> list = this.entitiesBySection[sectionIndex];
 
             if (list != null && list.has(entity)) {
@@ -394,7 +394,7 @@ public final class ChunkEntitySlices {
             ++this.count;
         }
 
-        public synchronized void removeEntity(final Entity entity, final int sectionIndex) {
+        public void removeEntity(final Entity entity, final int sectionIndex) {
             final BasicEntityList<Entity> list = this.entitiesBySection[sectionIndex];
 
             if (list == null || !list.remove(entity)) {
@@ -409,7 +409,7 @@ public final class ChunkEntitySlices {
             }
         }
 
-        public synchronized void getEntities(final Entity except, final AABB box, final List<Entity> into, final Predicate<? super Entity> predicate) {
+        public void getEntities(final Entity except, final AABB box, final List<Entity> into, final Predicate<? super Entity> predicate) {
             if (this.count == 0) {
                 return;
             }
@@ -447,7 +447,7 @@ public final class ChunkEntitySlices {
             }
         }
 
-        public synchronized void getEntitiesWithEnderDragonParts(final Entity except, final AABB box, final List<Entity> into,
+        public void getEntitiesWithEnderDragonParts(final Entity except, final AABB box, final List<Entity> into,
                                                     final Predicate<? super Entity> predicate) {
             if (this.count == 0) {
                 return;
@@ -498,7 +498,7 @@ public final class ChunkEntitySlices {
             }
         }
 
-        public synchronized void getEntitiesWithEnderDragonParts(final Entity except, final Class<?> clazz, final AABB box, final List<Entity> into,
+        public void getEntitiesWithEnderDragonParts(final Entity except, final Class<?> clazz, final AABB box, final List<Entity> into,
                                                     final Predicate<? super Entity> predicate) {
             if (this.count == 0) {
                 return;
@@ -549,7 +549,7 @@ public final class ChunkEntitySlices {
             }
         }
 
-        public synchronized <T extends Entity> void getEntities(final EntityType<?> type, final AABB box, final List<? super T> into,
+        public <T extends Entity> void getEntities(final EntityType<?> type, final AABB box, final List<? super T> into,
                                                    final Predicate<? super T> predicate) {
             if (this.count == 0) {
                 return;
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 9356b894ddef2683a4e0bbd7461896dc27e6ecd1..aaaea3d2dc12f33bfa437845d2b933cf75b7b74f 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -287,7 +287,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     private volatile boolean isSaving;
 
     public boolean asyncEntityMoveEnabled;
-    public boolean asyncEntityAIEnabled;
+    public boolean asyncEntityEnabled;
     private final boolean asyncExecutorEnabled;
     private int asyncExecutorThreadCount;
     private final AtomicInteger threadId = new AtomicInteger();
@@ -423,13 +423,12 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         this.paperConfigurations = services.paperConfigurations(); // Paper
         //Hearse start
         HearseConfig.init();
-        this.asyncEntityAIEnabled = HearseConfig.getBoolean("enable-async-entity-ai",true);
-        this.asyncEntityMoveEnabled = HearseConfig.getBoolean("enable-async-entity-travel-and-push",true);
+        this.asyncEntityEnabled = HearseConfig.getBoolean("enable-async-entity",true);
         this.asyncExecutorThreadCount = HearseConfig.getInt("async-entity-executor-thread-count",Runtime.getRuntime().availableProcessors());
-        this.asyncExecutorEnabled = this.asyncEntityAIEnabled || this.asyncEntityMoveEnabled;
+        this.asyncExecutorEnabled = this.asyncEntityMoveEnabled;
         if (this.asyncExecutorEnabled){
             this.asyncExecutor = new CallbackExecutor(
-                    0,
+                    this.asyncExecutorThreadCount,
                     this.asyncExecutorThreadCount,
                     50,
                     TimeUnit.MILLISECONDS,
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 4a470950f78a30e9200657eefac22f1f540affb4..184f326f915d2e982d7e0e866f1485d6b0197804 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -731,36 +731,37 @@ public class ServerLevel extends Level implements WorldGenLevel {
                     if (false && this.shouldDiscardEntity(entity)) { // CraftBukkit - We prevent spawning in general, so this butchering is not needed
                         entity.discard();
                     } else {
-                        //gameprofilerfiller.push("checkDespawn"); // Purpur
-                        entity.checkDespawn();
-                        //gameprofilerfiller.pop(); // Purpur
-                        if (true || this.chunkSource.chunkMap.getDistanceManager().inEntityTickingRange(entity.chunkPosition().toLong())) { // Paper - now always true if in the ticking list
+                        MinecraftServer.getServer().executeMidTickTasks(); // Tuinity - execute chunk tasks mid tick //Hearse -- Move up
+                        if (MinecraftServer.getServer().asyncEntityEnabled){
+                            MinecraftServer.getServer().asyncExecutor.executeWithCallBack(()->{
+                                entity.checkDespawn();
+                                Entity entity1 = entity.getVehicle();
+                                if (entity1 != null) {
+                                    if (!entity1.isRemoved() && entity1.hasPassenger(entity)) {
+                                        return;
+                                    }
+                                    entity.stopRiding();
+                                }
+                                try {
+                                    this.tickNonPassenger(entity); // Pufferfish - changed
+                                } catch (Throwable throwable) {
+                                    throwable.printStackTrace();
+                                }
+                            },()->{});
+                        }else{
+                            entity.checkDespawn();
                             Entity entity1 = entity.getVehicle();
-
                             if (entity1 != null) {
                                 if (!entity1.isRemoved() && entity1.hasPassenger(entity)) {
                                     return;
                                 }
-
                                 entity.stopRiding();
                             }
-
-                            //gameprofilerfiller.push("tick"); // Purpur
-                            // Pufferfish start - copied from this.guardEntityTick
                             try {
                                 this.tickNonPassenger(entity); // Pufferfish - changed
-                                MinecraftServer.getServer().executeMidTickTasks(); // Tuinity - execute chunk tasks mid tick
                             } catch (Throwable throwable) {
-                                if (throwable instanceof ThreadDeath) throw throwable; // Paper
-                                // Paper start - Prevent tile entity and entity crashes
-                                final String msg = String.format("Entity threw exception at %s:%s,%s,%s", entity.level.getWorld().getName(), entity.getX(), entity.getY(), entity.getZ());
-                                MinecraftServer.LOGGER.error(msg, throwable);
-                                getCraftServer().getPluginManager().callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerInternalException(msg, throwable)));
-                                entity.discard();
-                                // Paper end
+                                throwable.printStackTrace();
                             }
-                            // Pufferfish end
-                            //gameprofilerfiller.pop(); // Purpur
                         }
                     }
                 }
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 213424b17dcc473ea4b54ed2de61e0110b52c145..1cbd69d88eb83527bfc4b3261d6e1f2c1dcead62 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -3474,9 +3474,11 @@ public abstract class LivingEntity extends Entity {
                 this.jumpInLiquid(FluidTags.LAVA);
             } else if ((this.onGround || flag && d7 <= d8) && this.noJumpDelay == 0) {
                 if (new com.destroystokyo.paper.event.entity.EntityJumpEvent(getBukkitLivingEntity()).callEvent()) { // Paper
-                this.jumpFromGround();
-                this.noJumpDelay = 10;
-                } else { this.setJumping(false); } // Paper - setJumping(false) stops a potential loop
+                    this.jumpFromGround();
+                    this.noJumpDelay = 10;
+                } else {
+                    this.setJumping(false);
+                } // Paper - setJumping(false) stops a potential loop
             }
         } else {
             this.noJumpDelay = 0;
@@ -3489,133 +3491,66 @@ public abstract class LivingEntity extends Entity {
         this.updateFallFlying();
         AABB axisalignedbb = this.getBoundingBox();
 
-        if (this instanceof net.minecraft.world.entity.player.Player || !MinecraftServer.getServer().asyncEntityMoveEnabled){
-            // SpigotTimings.timerEntityAIMove.startTiming(); // Spigot // Paper
-            this.travel(new Vec3((double) this.xxa, (double) this.yya, (double) this.zza));
-            // SpigotTimings.timerEntityAIMove.stopTiming(); // Spigot // Paper
-            //this.level.getProfiler().pop(); // Purpur
-            //this.level.getProfiler().push("freezing"); // Purpur
-            boolean flag1 = this.getType().is(EntityTypeTags.FREEZE_HURTS_EXTRA_TYPES);
-            int i;
+        // SpigotTimings.timerEntityAIMove.startTiming(); // Spigot // Paper
+        this.travel(new Vec3((double) this.xxa, (double) this.yya, (double) this.zza));
+        // SpigotTimings.timerEntityAIMove.stopTiming(); // Spigot // Paper
+        //this.level.getProfiler().pop(); // Purpur
+        //this.level.getProfiler().push("freezing"); // Purpur
+        boolean flag1 = this.getType().is(EntityTypeTags.FREEZE_HURTS_EXTRA_TYPES);
+        int i;
 
-            if (!this.level.isClientSide && !this.isDeadOrDying() && !freezeLocked) { // Paper - Freeze Tick Lock API
-                i = this.getTicksFrozen();
-                if (this.isInPowderSnow && this.canFreeze()) {
-                    this.setTicksFrozen(Math.min(this.getTicksRequiredToFreeze(), i + 1));
-                } else {
-                    this.setTicksFrozen(Math.max(0, i - 2));
-                }
+        if (!this.level.isClientSide && !this.isDeadOrDying() && !freezeLocked) { // Paper - Freeze Tick Lock API
+            i = this.getTicksFrozen();
+            if (this.isInPowderSnow && this.canFreeze()) {
+                this.setTicksFrozen(Math.min(this.getTicksRequiredToFreeze(), i + 1));
+            } else {
+                this.setTicksFrozen(Math.max(0, i - 2));
             }
+        }
 
-            this.removeFrost();
-            this.tryAddFrost();
-            if (!this.level.isClientSide && this.tickCount % 40 == 0 && this.isFullyFrozen() && this.canFreeze()) {
-                i = flag1 ? 5 : 1;
-                this.hurt(DamageSource.FREEZE, (float) i);
-            }
+        this.removeFrost();
+        this.tryAddFrost();
+        if (!this.level.isClientSide && this.tickCount % 40 == 0 && this.isFullyFrozen() && this.canFreeze()) {
+            i = flag1 ? 5 : 1;
+            this.hurt(DamageSource.FREEZE, (float) i);
+        }
 
-            //this.level.getProfiler().pop(); // Purpur
-            //this.level.getProfiler().push("push"); // Purpur
-            if (this.autoSpinAttackTicks > 0) {
-                --this.autoSpinAttackTicks;
-                this.checkAutoSpinAttack(axisalignedbb, this.getBoundingBox());
-            }
+        //this.level.getProfiler().pop(); // Purpur
+        //this.level.getProfiler().push("push"); // Purpur
+        if (this.autoSpinAttackTicks > 0) {
+            --this.autoSpinAttackTicks;
+            this.checkAutoSpinAttack(axisalignedbb, this.getBoundingBox());
+        }
 
-            this.pushEntities();
-            //this.level.getProfiler().pop(); // Purpur
-            if (this.xo != this.getX() || this.yo != this.getY() || this.zo != this.getZ() || this.yRotO != this.getYRot() || this.xRotO != this.getXRot()) {
-                if (((ServerLevel) this.level).hasEntityMoveEvent && !(this instanceof net.minecraft.world.entity.player.Player)) {
-                    // Purpur end
-                    Location from = new Location(this.level.getWorld(), this.xo, this.yo, this.zo, this.yRotO, this.xRotO);
-                    Location to = new Location (this.level.getWorld(), this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
-                    io.papermc.paper.event.entity.EntityMoveEvent event = new io.papermc.paper.event.entity.EntityMoveEvent(this.getBukkitLivingEntity(), from, to.clone());
+        this.pushEntities();
+        //this.level.getProfiler().pop(); // Purpur
+        if (this.xo != this.getX() || this.yo != this.getY() || this.zo != this.getZ() || this.yRotO != this.getYRot() || this.xRotO != this.getXRot()) {
+            if (((ServerLevel) this.level).hasEntityMoveEvent && !(this instanceof net.minecraft.world.entity.player.Player)) {
+                // Purpur end
+                Location from = new Location(this.level.getWorld(), this.xo, this.yo, this.zo, this.yRotO, this.xRotO);
+                Location to = new Location(this.level.getWorld(), this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
+                io.papermc.paper.event.entity.EntityMoveEvent event = new io.papermc.paper.event.entity.EntityMoveEvent(this.getBukkitLivingEntity(), from, to.clone());
+                if (!event.callEvent()) {
+                    absMoveTo(from.getX(), from.getY(), from.getZ(), from.getYaw(), from.getPitch());
+                } else if (!to.equals(event.getTo())) {
+                    absMoveTo(event.getTo().getX(), event.getTo().getY(), event.getTo().getZ(), event.getTo().getYaw(), event.getTo().getPitch());
+                }
+            }
+            // Purpur start
+            if (getRider() != null) {
+                getRider().resetLastActionTime();
+                if (((ServerLevel) level).hasRidableMoveEvent && this instanceof Mob) {
+                    Location from = new Location(level.getWorld(), xo, yo, zo, this.yRotO, this.xRotO);
+                    Location to = new Location(level.getWorld(), getX(), getY(), getZ(), this.getYRot(), this.getXRot());
+                    org.purpurmc.purpur.event.entity.RidableMoveEvent event = new org.purpurmc.purpur.event.entity.RidableMoveEvent((org.bukkit.entity.Mob) getBukkitLivingEntity(), (Player) getRider().getBukkitEntity(), from, to.clone());
                     if (!event.callEvent()) {
                         absMoveTo(from.getX(), from.getY(), from.getZ(), from.getYaw(), from.getPitch());
                     } else if (!to.equals(event.getTo())) {
-                        absMoveTo(event.getTo().getX(), event.getTo().getY(), event.getTo().getZ(), event.getTo().getYaw(), event.getTo().getPitch());
+                        absMoveTo(to.getX(), to.getY(), to.getZ(), to.getYaw(), to.getPitch());
                     }
                 }
-                // Purpur start
-                if (getRider() != null) {
-                    getRider().resetLastActionTime();
-                    if (((ServerLevel) level).hasRidableMoveEvent && this instanceof Mob) {
-                        Location from = new Location(level.getWorld(), xo, yo, zo, this.yRotO, this.xRotO);
-                        Location to = new Location(level.getWorld(), getX(), getY(), getZ(), this.getYRot(), this.getXRot());
-                        org.purpurmc.purpur.event.entity.RidableMoveEvent event = new org.purpurmc.purpur.event.entity.RidableMoveEvent((org.bukkit.entity.Mob) getBukkitLivingEntity(), (Player) getRider().getBukkitEntity(), from, to.clone());
-                        if (!event.callEvent()) {
-                            absMoveTo(from.getX(), from.getY(), from.getZ(), from.getYaw(), from.getPitch());
-                        } else if (!to.equals(event.getTo())) {
-                            absMoveTo(to.getX(), to.getY(), to.getZ(), to.getYaw(), to.getPitch());
-                        }
-                    }
-                }
-                // Purpur end
             }
-        }else{
-            MinecraftServer.getServer().asyncExecutor.executeWithCallBack(()->{
-                // SpigotTimings.timerEntityAIMove.startTiming(); // Spigot // Paper
-                this.travel(new Vec3((double) this.xxa, (double) this.yya, (double) this.zza));
-                // SpigotTimings.timerEntityAIMove.stopTiming(); // Spigot // Paper
-                //this.level.getProfiler().pop(); // Purpur
-                //this.level.getProfiler().push("freezing"); // Purpur
-                boolean flag1 = this.getType().is(EntityTypeTags.FREEZE_HURTS_EXTRA_TYPES);
-                int i;
-
-                if (!this.level.isClientSide && !this.isDeadOrDying() && !freezeLocked) { // Paper - Freeze Tick Lock API
-                    i = this.getTicksFrozen();
-                    if (this.isInPowderSnow && this.canFreeze()) {
-                        this.setTicksFrozen(Math.min(this.getTicksRequiredToFreeze(), i + 1));
-                    } else {
-                        this.setTicksFrozen(Math.max(0, i - 2));
-                    }
-                }
-
-                this.removeFrost();
-                this.tryAddFrost();
-                if (!this.level.isClientSide && this.tickCount % 40 == 0 && this.isFullyFrozen() && this.canFreeze()) {
-                    i = flag1 ? 5 : 1;
-                    this.hurt(DamageSource.FREEZE, (float) i);
-                }
-
-                //this.level.getProfiler().pop(); // Purpur
-                //this.level.getProfiler().push("push"); // Purpur
-                if (this.autoSpinAttackTicks > 0) {
-                    --this.autoSpinAttackTicks;
-                    this.checkAutoSpinAttack(axisalignedbb, this.getBoundingBox());
-                }
-
-                this.pushEntities();
-                //this.level.getProfiler().pop(); // Purpur
-            },()->{
-                if (this.xo != this.getX() || this.yo != this.getY() || this.zo != this.getZ() || this.yRotO != this.getYRot() || this.xRotO != this.getXRot()) {
-                    if (((ServerLevel) this.level).hasEntityMoveEvent && !(this instanceof net.minecraft.world.entity.player.Player)) {
-                        // Purpur end
-                        Location from = new Location(this.level.getWorld(), this.xo, this.yo, this.zo, this.yRotO, this.xRotO);
-                        Location to = new Location (this.level.getWorld(), this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
-                        io.papermc.paper.event.entity.EntityMoveEvent event = new io.papermc.paper.event.entity.EntityMoveEvent(this.getBukkitLivingEntity(), from, to.clone());
-                        if (!event.callEvent()) {
-                            absMoveTo(from.getX(), from.getY(), from.getZ(), from.getYaw(), from.getPitch());
-                        } else if (!to.equals(event.getTo())) {
-                            absMoveTo(event.getTo().getX(), event.getTo().getY(), event.getTo().getZ(), event.getTo().getYaw(), event.getTo().getPitch());
-                        }
-                    }
-                    // Purpur start
-                    if (getRider() != null) {
-                        getRider().resetLastActionTime();
-                        if (((ServerLevel) level).hasRidableMoveEvent && this instanceof Mob) {
-                            Location from = new Location(level.getWorld(), xo, yo, zo, this.yRotO, this.xRotO);
-                            Location to = new Location(level.getWorld(), getX(), getY(), getZ(), this.getYRot(), this.getXRot());
-                            org.purpurmc.purpur.event.entity.RidableMoveEvent event = new org.purpurmc.purpur.event.entity.RidableMoveEvent((org.bukkit.entity.Mob) getBukkitLivingEntity(), (Player) getRider().getBukkitEntity(), from, to.clone());
-                            if (!event.callEvent()) {
-                                absMoveTo(from.getX(), from.getY(), from.getZ(), from.getYaw(), from.getPitch());
-                            } else if (!to.equals(event.getTo())) {
-                                absMoveTo(to.getX(), to.getY(), to.getZ(), to.getYaw(), to.getPitch());
-                            }
-                        }
-                    }
-                    // Purpur end
-                }
-            });
+            // Purpur end
         }
 
         if (!this.level.isClientSide && this.isSensitiveToWater() && this.isInWaterRainOrBubble()) {
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 22aaca0d97c74014edfcc0fd3fa05cacfbc367be..47f37d9232c80607fccbd1a0ff289f908a175bfb 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -219,23 +219,11 @@ public abstract class Mob extends LivingEntity {
     public void inactiveTick() {
         super.inactiveTick();
         boolean isThrottled = gg.pufferfish.pufferfish.PufferfishConfig.throttleInactiveGoalSelectorTick && _pufferfish_inactiveTickDisableCounter++ % 20 != 0; // Pufferfish - throttle inactive goal selector ticking
-        if (MinecraftServer.getServer().asyncEntityAIEnabled) {
-            MinecraftServer.getServer().asyncExecutor.executeWithCallBack(() -> {
-                if (this.goalSelector.inactiveTick(this.activatedPriority, true) && !isThrottled) { // Pufferfish - pass activated priroity // Pufferfish - throttle inactive goal selector ticking
-                    this.goalSelector.tick();
-                }
-                if (this.targetSelector.inactiveTick(this.activatedPriority, true)) { // Pufferfish - pass activated priority
-                    this.targetSelector.tick();
-                }
-            }, () -> {
-            });
-        }else {
-            if (this.goalSelector.inactiveTick(this.activatedPriority, true) && !isThrottled) { // Pufferfish - pass activated priroity // Pufferfish - throttle inactive goal selector ticking
-                this.goalSelector.tick();
-            }
-            if (this.targetSelector.inactiveTick(this.activatedPriority, true)) { // Pufferfish - pass activated priority
-                this.targetSelector.tick();
-            }
+        if (this.goalSelector.inactiveTick(this.activatedPriority, true) && !isThrottled) { // Pufferfish - pass activated priroity // Pufferfish - throttle inactive goal selector ticking
+            this.goalSelector.tick();
+        }
+        if (this.targetSelector.inactiveTick(this.activatedPriority, true)) { // Pufferfish - pass activated priority
+            this.targetSelector.tick();
         }
     }
     // Paper end
@@ -920,60 +908,31 @@ public abstract class Mob extends LivingEntity {
         if (i % 10 == 0) this.sensing.tick(); // petal - only refresh line of sight cache every half second
         //this.level.getProfiler().pop(); // Purpur
 
-        if (MinecraftServer.getServer().asyncEntityAIEnabled){
-            MinecraftServer.getServer().asyncExecutor.executeWithCallBack(()->{
-                if (i % 2 != 0 && this.tickCount > 1) {
-                    //this.level.getProfiler().push("targetSelector"); // Purpur
-                    if (this.targetSelector.inactiveTick(this.activatedPriority, false)) // Pufferfish - use this to alternate ticking
-                        this.targetSelector.tickRunningGoals(false);
-                    //this.level.getProfiler().pop(); // Purpur
-                    //this.level.getProfiler().push("goalSelector"); // Purpur
-                    if (this.goalSelector.inactiveTick(this.activatedPriority, false)) // Pufferfish - use this to alternate ticking
-                        this.goalSelector.tickRunningGoals(false);
-                    //this.level.getProfiler().pop(); // Purpur
-                } else {
-                    //this.level.getProfiler().push("targetSelector"); // Purpur
-                    if (this.targetSelector.inactiveTick(this.activatedPriority, false)) // Pufferfish - use this to alternate ticking
-                        this.targetSelector.tick();
-                    //this.level.getProfiler().pop(); // Purpur
-                    //this.level.getProfiler().push("goalSelector"); // Purpur
-                    if (this.goalSelector.inactiveTick(this.activatedPriority, false)) // Pufferfish - use this to alternate ticking
-                        this.goalSelector.tick();
-                    //this.level.getProfiler().pop(); // Purpur
-                }
-                this.navigation.tick();
-                this.customServerAiStep();
-                this.moveControl.tick();
-                this.lookControl.tick();
-                this.jumpControl.tick();
-            }, this::sendDebugPackets);
-        }else{
-            if (i % 2 != 0 && this.tickCount > 1) {
-                //this.level.getProfiler().push("targetSelector"); // Purpur
-                if (this.targetSelector.inactiveTick(this.activatedPriority, false)) // Pufferfish - use this to alternate ticking
-                    this.targetSelector.tickRunningGoals(false);
-                //this.level.getProfiler().pop(); // Purpur
-                //this.level.getProfiler().push("goalSelector"); // Purpur
-                if (this.goalSelector.inactiveTick(this.activatedPriority, false)) // Pufferfish - use this to alternate ticking
-                    this.goalSelector.tickRunningGoals(false);
-                //this.level.getProfiler().pop(); // Purpur
-            } else {
-                //this.level.getProfiler().push("targetSelector"); // Purpur
-                if (this.targetSelector.inactiveTick(this.activatedPriority, false)) // Pufferfish - use this to alternate ticking
-                    this.targetSelector.tick();
-                //this.level.getProfiler().pop(); // Purpur
-                //this.level.getProfiler().push("goalSelector"); // Purpur
-                if (this.goalSelector.inactiveTick(this.activatedPriority, false)) // Pufferfish - use this to alternate ticking
-                    this.goalSelector.tick();
-                //this.level.getProfiler().pop(); // Purpur
-            }
-            this.navigation.tick();
-            this.customServerAiStep();
-            this.moveControl.tick();
-            this.lookControl.tick();
-            this.jumpControl.tick();
-            this.sendDebugPackets();
-        }
+        if (i % 2 != 0 && this.tickCount > 1) {
+            //this.level.getProfiler().push("targetSelector"); // Purpur
+            if (this.targetSelector.inactiveTick(this.activatedPriority, false)) // Pufferfish - use this to alternate ticking
+                this.targetSelector.tickRunningGoals(false);
+            //this.level.getProfiler().pop(); // Purpur
+            //this.level.getProfiler().push("goalSelector"); // Purpur
+            if (this.goalSelector.inactiveTick(this.activatedPriority, false)) // Pufferfish - use this to alternate ticking
+                this.goalSelector.tickRunningGoals(false);
+            //this.level.getProfiler().pop(); // Purpur
+        } else {
+            //this.level.getProfiler().push("targetSelector"); // Purpur
+            if (this.targetSelector.inactiveTick(this.activatedPriority, false)) // Pufferfish - use this to alternate ticking
+                this.targetSelector.tick();
+            //this.level.getProfiler().pop(); // Purpur
+            //this.level.getProfiler().push("goalSelector"); // Purpur
+            if (this.goalSelector.inactiveTick(this.activatedPriority, false)) // Pufferfish - use this to alternate ticking
+                this.goalSelector.tick();
+            //this.level.getProfiler().pop(); // Purpur
+        }
+        this.navigation.tick();
+        this.customServerAiStep();
+        this.moveControl.tick();
+        this.lookControl.tick();
+        this.jumpControl.tick();
+        this.sendDebugPackets();
     }
 
     protected void sendDebugPackets() {
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index d93ae034b7b27382590e6969e0990449429973d3..583dc4214c0d16a81deaf18ae1e117275e859674 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -317,28 +317,14 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         if (this.getUnhappyCounter() > 0) {
             this.setUnhappyCounter(this.getUnhappyCounter() - 1);
         }
-        if (MinecraftServer.getServer().asyncEntityAIEnabled){
-            MinecraftServer.getServer().asyncExecutor.executeWithCallBack(()->{
-                if (this.isEffectiveAi()) {
-                    if (level.spigotConfig.tickInactiveVillagers) {
-                        this.customServerAiStep();
-                    } else {
-                        this.mobTick(true);
-                    }
-                }
-            },()->{
-                maybeDecayGossip();
-            });
-        }else{
-            if (this.isEffectiveAi()) {
-                if (level.spigotConfig.tickInactiveVillagers) {
-                    this.customServerAiStep();
-                } else {
-                    this.mobTick(true);
-                }
+        if (this.isEffectiveAi()) {
+            if (level.spigotConfig.tickInactiveVillagers) {
+                this.customServerAiStep();
+            } else {
+                this.mobTick(true);
             }
-            this.maybeDecayGossip();
         }
+        this.maybeDecayGossip();
         // Paper end
         super.inactiveTick();
     }
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/NodeEvaluator.java b/src/main/java/net/minecraft/world/level/pathfinder/NodeEvaluator.java
index e1c89948b907d23f7fa5bb9629f1b507361f434d..abd78c107c49bfcc7149a4f65ac7007a5137333b 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/NodeEvaluator.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/NodeEvaluator.java
@@ -32,7 +32,7 @@ public abstract class NodeEvaluator {
     }
 
     public void done() {
-        if (MinecraftServer.getServer().asyncEntityAIEnabled){
+        if (MinecraftServer.getServer().asyncEntityEnabled){
             MinecraftServer.getServer().asyncExecutor.submitCleanTask(()->{
                 this.level = null;
                 this.mob = null;
