From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: wangxyper <wangxyper@163.com>
Date: Fri, 6 Jan 2023 07:59:07 +0800
Subject: [PATCH] Add config and limit the scheduled ticks in config


diff --git a/src/main/java/co/m2ek4u/hearse/HearseConfig.java b/src/main/java/co/m2ek4u/hearse/HearseConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..c2760d56ede46632b0225501ca93470871b45853
--- /dev/null
+++ b/src/main/java/co/m2ek4u/hearse/HearseConfig.java
@@ -0,0 +1,45 @@
+package co.m2ek4u.hearse;
+
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.io.IOException;
+
+public class HearseConfig {
+    private static YamlConfiguration configEntry;
+    private static final File CONFIG_FILE = new File("hearse.yml");
+
+    public static void init() {
+        configEntry = new YamlConfiguration();
+        try {
+            configEntry.load(CONFIG_FILE);
+        } catch (InvalidConfigurationException e) {
+            e.printStackTrace();
+        } catch (IOException ignored) {}
+        configEntry.options().copyDefaults(true);
+    }
+
+    public static void save(){
+        try {
+            configEntry.save(CONFIG_FILE);
+        }catch (Exception e){
+            e.printStackTrace();
+        }
+    }
+
+    public static int getInt(String key,int defaultValue){
+        configEntry.addDefault(key,defaultValue);
+        return configEntry.getInt(key);
+    }
+
+    public static boolean getBoolean(String key,boolean defaultValue){
+        configEntry.addDefault(key,defaultValue);
+        return configEntry.getBoolean(key);
+    }
+
+    public static String getString(String key,String defaultValue){
+        configEntry.addDefault(key,defaultValue);
+        return configEntry.getString(key);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 09cda218544f587072002ce14d0aed0fa61c3589..32807652eff529bec1a680721353fd61cf94edb7 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -2,6 +2,7 @@ package net.minecraft.server;
 
 import co.m2ek4u.aoame.AnotherTickThread;
 import co.m2ek4u.aoame.CallbackExecutor;
+import co.m2ek4u.hearse.HearseConfig;
 import com.google.common.base.Splitter;
 import com.google.common.collect.ImmutableList;
 import co.aikar.timings.Timings;
@@ -285,19 +286,12 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     protected WorldData worldData;
     private volatile boolean isSaving;
 
+    public boolean asyncEntityMoveEnabled;
+    public boolean asyncEntityAIEnabled;
+    private final boolean asyncExecutorEnabled;
+    private int asyncExecutorThreadCount;
     private final AtomicInteger threadId = new AtomicInteger();
-    public final CallbackExecutor asyncExecutor = new CallbackExecutor(
-            Runtime.getRuntime().availableProcessors(),
-            Runtime.getRuntime().availableProcessors(),
-            50,
-            TimeUnit.MILLISECONDS,
-            new LinkedBlockingQueue<>(),
-            task -> {
-                AnotherTickThread worker = new AnotherTickThread(task,"Entity-Async-Worker # "+threadId.getAndIncrement());
-                worker.setDaemon(true);
-                return worker;
-            }
-    );
+    public CallbackExecutor asyncExecutor;
 
     // CraftBukkit start
     public final WorldLoader.DataLoadContext worldLoader;
@@ -427,6 +421,27 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         // Paper end
         Runtime.getRuntime().addShutdownHook(new org.bukkit.craftbukkit.util.ServerShutdownThread(this));
         this.paperConfigurations = services.paperConfigurations(); // Paper
+        //Hearse start
+        HearseConfig.init();
+        this.asyncEntityAIEnabled = HearseConfig.getBoolean("enable-async-entity-ai",true);
+        this.asyncEntityMoveEnabled = HearseConfig.getBoolean("enable-async-entity-travel-and-push",true);
+        this.asyncExecutorThreadCount = HearseConfig.getInt("async-entity-executor-thread-count",Runtime.getRuntime().availableProcessors());
+        this.asyncExecutorEnabled = this.asyncEntityAIEnabled || this.asyncEntityMoveEnabled;
+        if (this.asyncExecutorEnabled){
+            this.asyncExecutor = new CallbackExecutor(
+                    0,
+                    this.asyncExecutorThreadCount,
+                    50,
+                    TimeUnit.MILLISECONDS,
+                    new LinkedBlockingQueue<>(),
+                    task -> {
+                        AnotherTickThread worker = new AnotherTickThread(task,"Entity-Async-Worker # "+threadId.getAndIncrement());
+                        worker.setDaemon(true);
+                        return worker;
+                    }
+            );
+        }
+        //Hearse end
     }
     // CraftBukkit end
 
@@ -1418,8 +1433,10 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public void onServerExit() {}
 
     public void tickServer(BooleanSupplier shouldKeepTicking) {
-        if (this.asyncExecutor.isSubmittingStarted()){
-            this.asyncExecutor.stopSubmitting();
+        if (this.asyncExecutorEnabled){
+            if (this.asyncExecutor.isSubmittingStarted()){
+                this.asyncExecutor.stopSubmitting();
+            }
         }
         //co.aikar.timings.TimingsManager.FULL_SERVER_TICK.startTiming(); // Paper // Purpur
         long i = Util.getNanos();
@@ -1434,7 +1451,9 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         new com.destroystokyo.paper.event.server.ServerTickStartEvent(this.tickCount+1).callEvent(); // Paper
 
         ++this.tickCount;
-        this.asyncExecutor.startSubmitting();
+        if (this.asyncExecutorEnabled){
+            this.asyncExecutor.startSubmitting();
+        }
         this.tickChildren(shouldKeepTicking);
         if (i - this.lastServerStatus >= 5000000000L) {
             this.lastServerStatus = i;
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index ebeefe4b7aa3e33f3df8dd4113206acdb94050d5..213424b17dcc473ea4b54ed2de61e0110b52c145 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -3489,7 +3489,7 @@ public abstract class LivingEntity extends Entity {
         this.updateFallFlying();
         AABB axisalignedbb = this.getBoundingBox();
 
-        if (this instanceof net.minecraft.world.entity.player.Player){
+        if (this instanceof net.minecraft.world.entity.player.Player || !MinecraftServer.getServer().asyncEntityMoveEnabled){
             // SpigotTimings.timerEntityAIMove.startTiming(); // Spigot // Paper
             this.travel(new Vec3((double) this.xxa, (double) this.yya, (double) this.zza));
             // SpigotTimings.timerEntityAIMove.stopTiming(); // Spigot // Paper
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 9a68f659868d43782d8b00367c6aafc18d4a55a5..22aaca0d97c74014edfcc0fd3fa05cacfbc367be 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -219,14 +219,24 @@ public abstract class Mob extends LivingEntity {
     public void inactiveTick() {
         super.inactiveTick();
         boolean isThrottled = gg.pufferfish.pufferfish.PufferfishConfig.throttleInactiveGoalSelectorTick && _pufferfish_inactiveTickDisableCounter++ % 20 != 0; // Pufferfish - throttle inactive goal selector ticking
-        MinecraftServer.getServer().asyncExecutor.executeWithCallBack(()->{
+        if (MinecraftServer.getServer().asyncEntityAIEnabled) {
+            MinecraftServer.getServer().asyncExecutor.executeWithCallBack(() -> {
+                if (this.goalSelector.inactiveTick(this.activatedPriority, true) && !isThrottled) { // Pufferfish - pass activated priroity // Pufferfish - throttle inactive goal selector ticking
+                    this.goalSelector.tick();
+                }
+                if (this.targetSelector.inactiveTick(this.activatedPriority, true)) { // Pufferfish - pass activated priority
+                    this.targetSelector.tick();
+                }
+            }, () -> {
+            });
+        }else {
             if (this.goalSelector.inactiveTick(this.activatedPriority, true) && !isThrottled) { // Pufferfish - pass activated priroity // Pufferfish - throttle inactive goal selector ticking
                 this.goalSelector.tick();
             }
             if (this.targetSelector.inactiveTick(this.activatedPriority, true)) { // Pufferfish - pass activated priority
                 this.targetSelector.tick();
             }
-        },()->{});
+        }
     }
     // Paper end
 
@@ -910,7 +920,34 @@ public abstract class Mob extends LivingEntity {
         if (i % 10 == 0) this.sensing.tick(); // petal - only refresh line of sight cache every half second
         //this.level.getProfiler().pop(); // Purpur
 
-        MinecraftServer.getServer().asyncExecutor.executeWithCallBack(()->{
+        if (MinecraftServer.getServer().asyncEntityAIEnabled){
+            MinecraftServer.getServer().asyncExecutor.executeWithCallBack(()->{
+                if (i % 2 != 0 && this.tickCount > 1) {
+                    //this.level.getProfiler().push("targetSelector"); // Purpur
+                    if (this.targetSelector.inactiveTick(this.activatedPriority, false)) // Pufferfish - use this to alternate ticking
+                        this.targetSelector.tickRunningGoals(false);
+                    //this.level.getProfiler().pop(); // Purpur
+                    //this.level.getProfiler().push("goalSelector"); // Purpur
+                    if (this.goalSelector.inactiveTick(this.activatedPriority, false)) // Pufferfish - use this to alternate ticking
+                        this.goalSelector.tickRunningGoals(false);
+                    //this.level.getProfiler().pop(); // Purpur
+                } else {
+                    //this.level.getProfiler().push("targetSelector"); // Purpur
+                    if (this.targetSelector.inactiveTick(this.activatedPriority, false)) // Pufferfish - use this to alternate ticking
+                        this.targetSelector.tick();
+                    //this.level.getProfiler().pop(); // Purpur
+                    //this.level.getProfiler().push("goalSelector"); // Purpur
+                    if (this.goalSelector.inactiveTick(this.activatedPriority, false)) // Pufferfish - use this to alternate ticking
+                        this.goalSelector.tick();
+                    //this.level.getProfiler().pop(); // Purpur
+                }
+                this.navigation.tick();
+                this.customServerAiStep();
+                this.moveControl.tick();
+                this.lookControl.tick();
+                this.jumpControl.tick();
+            }, this::sendDebugPackets);
+        }else{
             if (i % 2 != 0 && this.tickCount > 1) {
                 //this.level.getProfiler().push("targetSelector"); // Purpur
                 if (this.targetSelector.inactiveTick(this.activatedPriority, false)) // Pufferfish - use this to alternate ticking
@@ -935,7 +972,8 @@ public abstract class Mob extends LivingEntity {
             this.moveControl.tick();
             this.lookControl.tick();
             this.jumpControl.tick();
-        }, this::sendDebugPackets);
+            this.sendDebugPackets();
+        }
     }
 
     protected void sendDebugPackets() {
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 71a37aede7f958bbdb0bc92eba693105e9732d30..d93ae034b7b27382590e6969e0990449429973d3 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -317,7 +317,19 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         if (this.getUnhappyCounter() > 0) {
             this.setUnhappyCounter(this.getUnhappyCounter() - 1);
         }
-        MinecraftServer.getServer().asyncExecutor.executeWithCallBack(()->{
+        if (MinecraftServer.getServer().asyncEntityAIEnabled){
+            MinecraftServer.getServer().asyncExecutor.executeWithCallBack(()->{
+                if (this.isEffectiveAi()) {
+                    if (level.spigotConfig.tickInactiveVillagers) {
+                        this.customServerAiStep();
+                    } else {
+                        this.mobTick(true);
+                    }
+                }
+            },()->{
+                maybeDecayGossip();
+            });
+        }else{
             if (this.isEffectiveAi()) {
                 if (level.spigotConfig.tickInactiveVillagers) {
                     this.customServerAiStep();
@@ -325,9 +337,8 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
                     this.mobTick(true);
                 }
             }
-        },()->{
-             maybeDecayGossip();
-        });
+            this.maybeDecayGossip();
+        }
         // Paper end
         super.inactiveTick();
     }
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/NodeEvaluator.java b/src/main/java/net/minecraft/world/level/pathfinder/NodeEvaluator.java
index 0aeff915b0518f64d291b6a4a538e0cd183535c5..e1c89948b907d23f7fa5bb9629f1b507361f434d 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/NodeEvaluator.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/NodeEvaluator.java
@@ -32,10 +32,15 @@ public abstract class NodeEvaluator {
     }
 
     public void done() {
-        MinecraftServer.getServer().asyncExecutor.submitCleanTask(()->{
+        if (MinecraftServer.getServer().asyncEntityAIEnabled){
+            MinecraftServer.getServer().asyncExecutor.submitCleanTask(()->{
+                this.level = null;
+                this.mob = null;
+            });
+        }else{
             this.level = null;
             this.mob = null;
-        });
+        }
     }
 
     protected Node getNode(BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/ticks/LevelTicks.java b/src/main/java/net/minecraft/world/ticks/LevelTicks.java
index 5dea8414964e0d2d1fb15a6baa27227e9722bfc7..5711d6d87a502978a6be1dd5984ee587f0633e9d 100644
--- a/src/main/java/net/minecraft/world/ticks/LevelTicks.java
+++ b/src/main/java/net/minecraft/world/ticks/LevelTicks.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.ticks;
 
+import co.m2ek4u.hearse.HearseConfig;
 import it.unimi.dsi.fastutil.longs.Long2LongMap;
 import it.unimi.dsi.fastutil.longs.Long2LongMaps;
 import it.unimi.dsi.fastutil.longs.Long2LongOpenHashMap;
@@ -28,9 +29,7 @@ import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
 
 public class LevelTicks<T> implements LevelTickAccess<T> {
-    private static final Comparator<LevelChunkTicks<?>> CONTAINER_DRAIN_ORDER = (a, b) -> {
-        return ScheduledTick.INTRA_TICK_DRAIN_ORDER.compare(a.peek(), b.peek());
-    };
+    private static final Comparator<LevelChunkTicks<?>> CONTAINER_DRAIN_ORDER = (a, b) -> ScheduledTick.INTRA_TICK_DRAIN_ORDER.compare(a.peek(), b.peek());
     private final LongPredicate tickCheck;
     private final Supplier<ProfilerFiller> profiler;
     private final Long2ObjectMap<LevelChunkTicks<T>> allContainers = new Long2ObjectOpenHashMap<>();
@@ -41,11 +40,12 @@ public class LevelTicks<T> implements LevelTickAccess<T> {
     private final Queue<ScheduledTick<T>> toRunThisTick = new ArrayDeque<>();
     private final List<ScheduledTick<T>> alreadyRunThisTick = new ArrayList<>();
     private final Set<ScheduledTick<?>> toRunThisTickSet = new ObjectOpenCustomHashSet<>(ScheduledTick.UNIQUE_TICK_HASH);
+    private static int taskLimit = HearseConfig.getInt("scheduled-task-limit-per-tick",65535);
+
     private final BiConsumer<LevelChunkTicks<T>, ScheduledTick<T>> chunkScheduleUpdater = (chunkTickScheduler, tick) -> {
         if (tick.equals(chunkTickScheduler.peek())) {
             this.updateContainerScheduling(tick);
         }
-
     };
 
     public LevelTicks(LongPredicate tickingFutureReadyPredicate, Supplier<ProfilerFiller> profilerGetter) {
@@ -186,21 +186,33 @@ public class LevelTicks<T> implements LevelTickAccess<T> {
         return this.toRunThisTick.size() < maxTicks;
     }
 
+    private boolean allRunned;
+
     private void runCollectedTicks(BiConsumer<BlockPos, T> ticker) {
+        int cycleCounter = 0;
         while(!this.toRunThisTick.isEmpty()) {
+            if (cycleCounter >= taskLimit){
+                break;
+            }
             ScheduledTick<T> scheduledTick = this.toRunThisTick.poll();
             if (!this.toRunThisTickSet.isEmpty()) {
                 this.toRunThisTickSet.remove(scheduledTick);
             }
-
             this.alreadyRunThisTick.add(scheduledTick);
             ticker.accept(scheduledTick.pos(), scheduledTick.type());
+            cycleCounter++;
         }
-
+        if (cycleCounter >= taskLimit){
+            this.allRunned = false;
+            return;
+        }
+        this.allRunned = true;
     }
 
     private void cleanupAfterTick() {
-        this.toRunThisTick.clear();
+        if (this.allRunned){
+            this.toRunThisTick.clear();
+        }
         this.containersToTick.clear();
         this.alreadyRunThisTick.clear();
         this.toRunThisTickSet.clear();
