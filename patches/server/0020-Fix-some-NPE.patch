From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: wangxyper <wangxyper@163.com>
Date: Tue, 17 Jan 2023 16:30:58 +0800
Subject: [PATCH] Fix some NPE


diff --git a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
index 14e87135513c0f5fc1e16beae3ea596f9c23a542..d183eb5ba934236469855b374904ef72a09b869f 100644
--- a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
+++ b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
@@ -37,9 +37,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.NoSuchElementException;
 import java.util.UUID;
-import java.util.concurrent.locks.Lock;
-import java.util.concurrent.locks.ReentrantLock;
-import java.util.concurrent.locks.StampedLock;
+import java.util.concurrent.locks.*;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
 
@@ -54,9 +52,10 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
     public final ServerLevel world;
 
     private final StampedLock entityByLock = new StampedLock();
-    private final Lock chunkEntitySlicesLock = new ReentrantLock(true);
+    private final Lock entityGetChunkLock = new ReentrantLock();
+    private final ReadWriteLock chunkEntitySlicesLock = new ReentrantReadWriteLock();
 
-    protected final Long2ObjectMap<ChunkSlicesRegion> regions = Long2ObjectMaps.synchronize(new Long2ObjectOpenHashMap<>(128, 0.5f));
+    protected final Long2ObjectMap<ChunkSlicesRegion> regions = new Long2ObjectOpenHashMap<>(128, 0.5f);
 
     private final int minSection; // inclusive
     private final int maxSection; // inclusive
@@ -136,7 +135,14 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
     }
 
     public String getDebugInfo() {
-        return "count_id:" + this.entityById.size() + ",count_uuid:" + this.entityByUUID.size() + ",region_count:" + this.regions.size();
+        int reginSize;
+        this.chunkEntitySlicesLock.readLock().lock();
+        try {
+            reginSize = this.regions.size();
+        }finally {
+            this.chunkEntitySlicesLock.readLock().unlock();
+        }
+        return "count_id:" + this.entityById.size() + ",count_uuid:" + this.entityByUUID.size() + ",region_count:" + reginSize;
     }
 
     static final class ArrayIterable<T> implements Iterable<T> {
@@ -173,12 +179,12 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
             }
 
             @Override
-            public synchronized boolean hasNext() {
+            public boolean hasNext() {
                 return this.off < this.length;
             }
 
             @Override
-            public synchronized T next() {
+            public T next() {
                 if (this.off >= this.length) {
                     throw new NoSuchElementException();
                 }
@@ -186,7 +192,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
             }
 
             @Override
-            public synchronized void remove() {
+            public void remove() {
                 throw new UnsupportedOperationException();
             }
         }
@@ -355,7 +361,15 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         entity.sectionX = sectionX;
         entity.sectionY = sectionY;
         entity.sectionZ = sectionZ;
-        final ChunkEntitySlices slices = this.getOrCreateChunk(sectionX, sectionZ);
+        ChunkEntitySlices slices;
+
+        this.entityGetChunkLock.lock();
+        try {
+            slices = this.getOrCreateChunk(sectionX, sectionZ);
+        }finally {
+            this.entityGetChunkLock.unlock();
+        }
+
         if (!slices.addEntity(entity, sectionY)) {
             LOGGER.warn("Entity " + entity + " added to world '" + this.world.getWorld().getName() + "', but was already contained in entity chunk (" + sectionX + "," + sectionZ + ")");
         }
@@ -376,11 +390,11 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
             throw new IllegalStateException("Only call Entity#setRemoved to remove an entity");
         }
         ChunkEntitySlices slices;
-        this.chunkEntitySlicesLock.lock();
+        this.entityGetChunkLock.lock();
         try {
             slices = this.getChunk(sectionX, sectionZ);
         }finally {
-            this.chunkEntitySlicesLock.unlock();
+            this.entityGetChunkLock.unlock();
         }
         // all entities should be in a chunk
         if (slices == null) {
@@ -425,13 +439,16 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         TickThread.ensureTickThread(this.world, entity.sectionX, entity.sectionZ, "Cannot move entity off-main");
 
         ChunkEntitySlices old;
-        this.chunkEntitySlicesLock.lock();
+        ChunkEntitySlices slices;
+
+        this.entityGetChunkLock.lock();
         try {
             old = this.getChunk(entity.sectionX, entity.sectionZ);
+            slices = this.getOrCreateChunk(newSectionX, newSectionZ);
         }finally {
-            this.chunkEntitySlicesLock.unlock();
+            this.entityGetChunkLock.unlock();
         }
-        final ChunkEntitySlices slices = this.getOrCreateChunk(newSectionX, newSectionZ);
+
 
         if (!old.removeEntity(entity, entity.sectionY)) {
             LOGGER.warn("Could not remove entity " + entity + " from its old chunk section (" + entity.sectionX + "," + entity.sectionY + "," + entity.sectionZ + ") since it was not contained in the section");
@@ -647,20 +664,18 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
 
     public void entitySectionLoad(final int chunkX, final int chunkZ, final ChunkEntitySlices slices) {
         TickThread.ensureTickThread(this.world, chunkX, chunkZ, "Cannot load in entity section off-main");
-        synchronized (this) {
-            final ChunkEntitySlices curr = this.getChunk(chunkX, chunkZ);
+        final ChunkEntitySlices curr = this.getChunk(chunkX, chunkZ);
+        this.chunkEntitySlicesLock.writeLock().lock();
+        try {
             if (curr != null) {
-                this.chunkEntitySlicesLock.lock();
-                try {
-                    this.removeChunk(chunkX, chunkZ);
-                    curr.mergeInto(slices);
-                    this.addChunk(chunkX, chunkZ, slices);
-                }finally {
-                    this.chunkEntitySlicesLock.unlock();
-                }
+                this.removeChunk(chunkX, chunkZ);
+                curr.mergeInto(slices);
+                this.addChunk(chunkX, chunkZ, slices);
             } else {
                 this.addChunk(chunkX, chunkZ, slices);
             }
+        } finally {
+            this.chunkEntitySlicesLock.writeLock().unlock();
         }
     }
 
@@ -675,7 +690,6 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         if (region == null) {
             return null;
         }
-
         return region.get((chunkX & REGION_MASK) | ((chunkZ & REGION_MASK) << REGION_SHIFT));
     }
 
@@ -692,32 +706,46 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
 
     public ChunkSlicesRegion getRegion(final int regionX, final int regionZ) {
         final long key = CoordinateUtils.getChunkKey(regionX, regionZ);
-        return this.regions.get(key);
+        this.chunkEntitySlicesLock.readLock().lock();
+        try {
+            return this.regions.get(key);
+        }finally {
+            this.chunkEntitySlicesLock.readLock().unlock();
+        }
     }
 
-    private synchronized void removeChunk(final int chunkX, final int chunkZ) {
+    private void removeChunk(final int chunkX, final int chunkZ) {
         final long key = CoordinateUtils.getChunkKey(chunkX >> REGION_SHIFT, chunkZ >> REGION_SHIFT);
         final int relIndex = (chunkX & REGION_MASK) | ((chunkZ & REGION_MASK) << REGION_SHIFT);
 
-        final ChunkSlicesRegion region = this.regions.get(key);
-        final int remaining = region.remove(relIndex);
-
-        if (remaining == 0) {
-            this.regions.remove(key);
+        this.chunkEntitySlicesLock.writeLock().lock();
+        try {
+            final ChunkSlicesRegion region = this.regions.get(key);
+            final int remaining = region.remove(relIndex);
+            if (remaining == 0) {
+                this.regions.remove(key);
+            }
+        }finally {
+            this.chunkEntitySlicesLock.writeLock().unlock();
         }
     }
 
-    public synchronized void addChunk(final int chunkX, final int chunkZ, final ChunkEntitySlices slices) {
+    public void addChunk(final int chunkX, final int chunkZ, final ChunkEntitySlices slices) {
         final long key = CoordinateUtils.getChunkKey(chunkX >> REGION_SHIFT, chunkZ >> REGION_SHIFT);
         final int relIndex = (chunkX & REGION_MASK) | ((chunkZ & REGION_MASK) << REGION_SHIFT);
 
-        ChunkSlicesRegion region = this.regions.get(key);
-        if (region != null) {
-            region.add(relIndex, slices);
-        } else {
-            region = new ChunkSlicesRegion();
-            region.add(relIndex, slices);
-            this.regions.put(key, region);
+        this.chunkEntitySlicesLock.writeLock().lock();
+        try {
+            ChunkSlicesRegion region = this.regions.get(key);
+            if (region != null) {
+                region.add(relIndex, slices);
+            } else {
+                region = new ChunkSlicesRegion();
+                region.add(relIndex, slices);
+                this.regions.put(key, region);
+            }
+        } finally {
+            this.chunkEntitySlicesLock.writeLock().unlock();
         }
     }
 
@@ -726,11 +754,11 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         protected final ChunkEntitySlices[] slices = new ChunkEntitySlices[REGION_SIZE * REGION_SIZE];
         protected int sliceCount;
 
-        public ChunkEntitySlices get(final int index) {
+        public synchronized ChunkEntitySlices get(final int index) {
             return this.slices[index];
         }
 
-        public int remove(final int index) {
+        public synchronized int remove(final int index) {
             final ChunkEntitySlices slices = this.slices[index];
             if (slices == null) {
                 throw new IllegalStateException();
@@ -741,7 +769,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
             return --this.sliceCount;
         }
 
-        public void add(final int index, final ChunkEntitySlices slices) {
+        public synchronized void add(final int index, final ChunkEntitySlices slices) {
             final ChunkEntitySlices curr = this.slices[index];
             if (curr != null) {
                 throw new IllegalStateException();
