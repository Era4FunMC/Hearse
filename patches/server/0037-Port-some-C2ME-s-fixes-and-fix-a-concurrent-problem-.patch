From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: wangxyper <wangxyper@163.com>
Date: Sat, 21 Jan 2023 08:46:23 +0800
Subject: [PATCH] Port some C2ME's fixes and fix a concurrent problem in
 ChunkMap


diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 3986145df9d01b8e77c28efe6a5dd33463395ba8..3f1969af92e2a9d0ecc109999d2f23c185ff4516 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -1457,7 +1457,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         final Entity entity;
         private final int range;
         SectionPos lastSectionPos;
-        public final Set<ServerPlayerConnection> seenBy = ReferenceSets.synchronize(new ReferenceOpenHashSet<>()); // Paper - optimise map impl //Hearse - multithread tracker
+        public final Set<ServerPlayerConnection> seenBy = Sets.newConcurrentHashSet(); // Paper - optimise map impl //Hearse - multithread tracker
 
         public TrackedEntity(Entity entity, int i, int j, boolean flag) {
             this.serverEntity = new ServerEntity(ChunkMap.this.level, entity, j, flag, this::broadcast, this.seenBy); // CraftBukkit
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index b151339cc56418f82f9b75b39b8fc6ab6686993e..e73a7685cc78af407131388acff62c3427fd4618 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -1,5 +1,6 @@
 package net.minecraft.server.level;
 
+import ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor;
 import co.earthme.hearse.concurrent.thread.Worker;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.Lists;
@@ -378,7 +379,7 @@ public class ServerChunkCache extends ChunkSource {
     }
     // Paper end - async chunk io
 
-    private final Object workerGetChunkLock = new Object();
+    private final Object schedulingMutex = new Object();
 
     @Nullable
     @Override
@@ -388,58 +389,46 @@ public class ServerChunkCache extends ChunkSource {
                 return this.getChunk(x, z, leastStatus, create);
             }, this.mainThreadProcessor).join();
         } else {
-            if (Thread.currentThread() instanceof Worker){
-                synchronized (this.workerGetChunkLock){
-                    return this.getChunkUnsafe(x,z,leastStatus,create);
-                }
+            final int x1 = x; final int z1 = z; // Paper - conflict on variable change
+            //ProfilerFiller gameprofilerfiller = this.level.getProfiler(); // Purpur
+            LevelChunk ifLoaded = this.getChunkAtIfLoadedMainThread(x, z);
+            if (ifLoaded != null) {
+                return ifLoaded;
             }
-            return this.getChunkUnsafe(x,z,leastStatus,create);
-        }
-    }
-
-    private ChunkAccess getChunkUnsafe(int x,int z,ChunkStatus leastStatus,boolean create){
-        final int x1 = x; final int z1 = z; // Paper - conflict on variable change
-        // Paper start - optimise for loaded chunks
-        LevelChunk ifLoaded = this.getChunkAtIfLoadedMainThread(x, z);
-        if (ifLoaded != null) {
-            return ifLoaded;
-        }
-        // Paper end
-        //ProfilerFiller gameprofilerfiller = this.level.getProfiler(); // Purpur
-
-        //gameprofilerfiller.incrementCounter("getChunk"); // Purpur
-        long k = ChunkPos.asLong(x, z);
+            //gameprofilerfiller.incrementCounter("getChunk"); // Purpur
+            long k = ChunkPos.asLong(x, z);
 
-        ChunkAccess ichunkaccess;
+            ChunkAccess ichunkaccess;
 
-        // Paper - rewrite chunk system - there are no correct callbacks to remove items from cache in the new chunk system
+            // Paper - rewrite chunk system - there are no correct callbacks to remove items from cache in the new chunk system
 
-        //gameprofilerfiller.incrementCounter("getChunkCacheMiss"); // Purpur
-        CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.getChunkFutureMainThread(x, z, leastStatus, create, true); // Paper
-        ServerChunkCache.MainThreadExecutor chunkproviderserver_b = this.mainThreadProcessor;
+            //gameprofilerfiller.incrementCounter("getChunkCacheMiss"); // Purpur
+            CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.getChunkFutureMainThread(x, z, leastStatus, create, true); // Paper
+            ServerChunkCache.MainThreadExecutor chunkproviderserver_b = this.mainThreadProcessor;
 
-        Objects.requireNonNull(completablefuture);
-        if (!completablefuture.isDone()) { // Paper
-            // Paper start - async chunk io/loading
-            io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.pushChunkWait(this.level, x1, z1); // Paper - rewrite chunk system
-            // Paper end
-            com.destroystokyo.paper.io.SyncLoadFinder.logSyncLoad(this.level, x1, z1); // Paper - sync load info
-            //this.level.timings.syncChunkLoad.startTiming(); // Paper // Purpur
-            chunkproviderserver_b.managedBlock(completablefuture::isDone);
-            io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.popChunkWait(); // Paper - async chunk debug  // Paper - rewrite chunk system
-            //this.level.timings.syncChunkLoad.stopTiming(); // Paper // Purpur
-        } // Paper
-        ichunkaccess = (ChunkAccess) ((Either) completablefuture.join()).map((ichunkaccess1) -> {
-            return ichunkaccess1;
-        }, (playerchunk_failure) -> {
-            if (create) {
-                throw (IllegalStateException) Util.pauseInIde(new IllegalStateException("Chunk not there when requested: " + playerchunk_failure));
-            } else {
-                return null;
-            }
-        });
-        this.storeInCache(k, ichunkaccess, leastStatus);
-        return ichunkaccess;
+            Objects.requireNonNull(completablefuture);
+            if (!completablefuture.isDone()) { // Paper
+                // Paper start - async chunk io/loading
+                io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.pushChunkWait(this.level, x1, z1); // Paper - rewrite chunk system
+                // Paper end
+                com.destroystokyo.paper.io.SyncLoadFinder.logSyncLoad(this.level, x1, z1); // Paper - sync load info
+                //this.level.timings.syncChunkLoad.startTiming(); // Paper // Purpur
+                chunkproviderserver_b.managedBlock(completablefuture::isDone);
+                io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.popChunkWait(); // Paper - async chunk debug  // Paper - rewrite chunk system
+                //this.level.timings.syncChunkLoad.stopTiming(); // Paper // Purpur
+            } // Paper
+            ichunkaccess = (ChunkAccess) ((Either) completablefuture.join()).map((ichunkaccess1) -> {
+                return ichunkaccess1;
+            }, (playerchunk_failure) -> {
+                if (create) {
+                    throw (IllegalStateException) Util.pauseInIde(new IllegalStateException("Chunk not there when requested: " + playerchunk_failure));
+                } else {
+                    return null;
+                }
+            });
+            this.storeInCache(k, ichunkaccess, leastStatus);
+            return ichunkaccess;
+        }
     }
 
     @Nullable
@@ -509,11 +498,14 @@ public class ServerChunkCache extends ChunkSource {
                 }
             };
 
-            this.level.chunkTaskScheduler.scheduleChunkLoad(
-                chunkX, chunkZ, leastStatus, true,
-                isUrgent ? ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor.Priority.BLOCKING : ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor.Priority.NORMAL,
-                complete
-            );
+            //C2ME --general issue fixes
+            synchronized (this.schedulingMutex){
+                this.level.chunkTaskScheduler.scheduleChunkLoad(
+                        chunkX, chunkZ, leastStatus, true,
+                        isUrgent ? PrioritisedExecutor.Priority.BLOCKING : PrioritisedExecutor.Priority.NORMAL,
+                        complete
+                );
+            }
 
             return ret;
         } else {
